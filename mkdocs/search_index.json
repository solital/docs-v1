{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to Solital Framework documentation\n\n\n\n\nYou are reading the version documentation: \n1.0-beta\n\n\nAttention: this framework is still being developed, dont' use it in a real project\n\n\nPlease read the \nStarting\n page to start using Solital",
            "title": "1. Welcome"
        },
        {
            "location": "/#welcome-to-solital-framework-documentation",
            "text": "You are reading the version documentation:  1.0-beta  Attention: this framework is still being developed, dont' use it in a real project  Please read the  Starting  page to start using Solital",
            "title": "Welcome to Solital Framework documentation"
        },
        {
            "location": "/2.starting/",
            "text": "Starting\n\n\nSolital is a complete framework with everything you need to create high-value projects.\n\n\nInstalling via Composer\n\n\nTo download Solital, use the command below:\n\n\ncomposer create-project solital/solital [solital_project_folder]\n\n\n\n\nIt only takes a few lines of code to get started:\n\n\nCourse::get('/', function() {\n    return 'Hello world';\n});\n\n\n\n\nRunning\n\n\nTo execute the project, use the built-in PHP server or create a virtual host:\n\n\nphp -S localhost:8000 -t public/\n\n\n\n\nRequirements\n\n\n\n\nPHP 7.1 or greater\n\n\nPHP JSON extension enabled\n\n\nPHP PDO extension enabled\n\n\n\n\nFeatures\n\n\n\n\nBasic routing (GET, POST, PUT, PATCH, UPDATE, DELETE) with support for custom multiple verbs.\n\n\nRegular Expression Constraints for parameters.\n\n\nWolf template system.\n\n\nHTTP client manipulation.\n\n\nVinci development assistant.\n\n\nMiddleware (classes that intercepts before the route is rendered).\n\n\nORM for database persistence\n\n\nCSRF protection.\n\n\nSub-domain routing\n\n\nCustom boot managers to rewrite urls to \"nicer\" ones.\n\n\nInput manager; easily manage GET, POST and FILE values.",
            "title": "2. Starting"
        },
        {
            "location": "/2.starting/#starting",
            "text": "Solital is a complete framework with everything you need to create high-value projects.",
            "title": "Starting"
        },
        {
            "location": "/2.starting/#installing-via-composer",
            "text": "To download Solital, use the command below:  composer create-project solital/solital [solital_project_folder]  It only takes a few lines of code to get started:  Course::get('/', function() {\n    return 'Hello world';\n});",
            "title": "Installing via Composer"
        },
        {
            "location": "/2.starting/#running",
            "text": "To execute the project, use the built-in PHP server or create a virtual host:  php -S localhost:8000 -t public/",
            "title": "Running"
        },
        {
            "location": "/2.starting/#requirements",
            "text": "PHP 7.1 or greater  PHP JSON extension enabled  PHP PDO extension enabled",
            "title": "Requirements"
        },
        {
            "location": "/2.starting/#features",
            "text": "Basic routing (GET, POST, PUT, PATCH, UPDATE, DELETE) with support for custom multiple verbs.  Regular Expression Constraints for parameters.  Wolf template system.  HTTP client manipulation.  Vinci development assistant.  Middleware (classes that intercepts before the route is rendered).  ORM for database persistence  CSRF protection.  Sub-domain routing  Custom boot managers to rewrite urls to \"nicer\" ones.  Input manager; easily manage GET, POST and FILE values.",
            "title": "Features"
        },
        {
            "location": "/3.installation/",
            "text": "Installation\n\n\nSetting up Nginx\n\n\nIf you are using Nginx please make sure that url-rewriting is enabled.\n\n\nYou can easily enable url-rewriting by adding the following configuration for the Nginx configuration-file for the demo-project.\n\n\nlocation / {\n    try_files $uri $uri/ /index.php?$query_string;\n}\n\n\n\n\nSetting up Apache\n\n\nNothing special is required for Apache to work. We've include the \n.htaccess\n file in the \npublic\n folder. If rewriting is not working for you, please check that the \nmod_rewrite\n module (htaccess support) is enabled in the Apache configuration.\n\n\nBelow is an example of an working \n.htaccess\n file used by Solital.\n\n\nSimply create a new \n.htaccess\n file in your projects \npublic\n directory and paste the contents below in your newly created file. This will redirect all requests to your \nindex.php\n file (see Configuration section below).\n\n\nRewriteEngine on\nRewriteCond %{SCRIPT_FILENAME} !-f\nRewriteCond %{SCRIPT_FILENAME} !-d\nRewriteCond %{SCRIPT_FILENAME} !-l\nRewriteRule ^(.*)$ index.php/$1\n\n\n\n\nSetting up IIS\n\n\nOn IIS you have to add some lines your \nweb.config\n file in the \npublic\n folder or create a new one. If rewriting is not working for you, please check that your IIS version have included the \nurl rewrite\n module or download and install them from Microsoft web site.\n\n\nweb.config example\n\n\nBelow is an example of an working \nweb.config\n file used by Solital.\n\n\nSimply create a new \nweb.config\n file in your projects \npublic\n directory and paste the contents below in your newly created file. This will redirect all requests to your \nindex.php\n file (see Configuration section below). If the \nweb.config\n file already exists, add the \n<rewrite>\n section inside the \n<system.webServer>\n branch.\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n    <rewrite>\n      <rules>\n        <!-- Remove slash '/' from the en of the url -->\n        <rule name=\"RewriteRequestsToPublic\">\n          <match url=\"^(.*)$\" />\n          <conditions logicalGrouping=\"MatchAll\" trackAllCaptures=\"false\">\n          </conditions>\n          <action type=\"Rewrite\" url=\"/{R:0}\" />\n        </rule>\n\n        <!-- When requested file or folder don't exists, will request again through index.php -->\n        <rule name=\"Imported Rule 1\" stopProcessing=\"true\">\n          <match url=\"^(.*)$\" ignoreCase=\"true\" />\n          <conditions logicalGrouping=\"MatchAll\">\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n          </conditions>\n          <action type=\"Rewrite\" url=\"/index.php/{R:1}\" appendQueryString=\"true\" />\n        </rule>\n      </rules>\n    </rewrite>\n    </system.webServer>\n</configuration>\n\n\n\n\nTroubleshooting\n\n\nIf you do not have a \nfavicon.ico\n file in your project, you can get a \nNotFoundHttpException\n (404 - not found).\n\n\nTo add \nfavicon.ico\n to the IIS ignore-list, add the following line to the \n<conditions>\n group:\n\n\n<add input=\"{REQUEST_FILENAME}\" negate=\"true\" pattern=\"favicon.ico\" ignoreCase=\"true\" />\n\n\n\n\nYou can also make one exception for files with some extensions:\n\n\n<add input=\"{REQUEST_FILENAME}\" pattern=\"\\.ico|\\.png|\\.css|\\.jpg\" negate=\"true\" ignoreCase=\"true\" />\n\n\n\n\nIf you are using \n$_SERVER['ORIG_PATH_INFO']\n, you will get \n\\index.php\\\n as part of the returned value. \n\n\nExample:\n\n\n/index.php/test/mypage.php\n\n\n\n\nHelper functions\n\n\nWe recommend that you add these helper functions to your project. These will allow you to access functionality of the router more easily.",
            "title": "3. Installation"
        },
        {
            "location": "/3.installation/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/3.installation/#setting-up-nginx",
            "text": "If you are using Nginx please make sure that url-rewriting is enabled.  You can easily enable url-rewriting by adding the following configuration for the Nginx configuration-file for the demo-project.  location / {\n    try_files $uri $uri/ /index.php?$query_string;\n}",
            "title": "Setting up Nginx"
        },
        {
            "location": "/3.installation/#setting-up-apache",
            "text": "Nothing special is required for Apache to work. We've include the  .htaccess  file in the  public  folder. If rewriting is not working for you, please check that the  mod_rewrite  module (htaccess support) is enabled in the Apache configuration.  Below is an example of an working  .htaccess  file used by Solital.  Simply create a new  .htaccess  file in your projects  public  directory and paste the contents below in your newly created file. This will redirect all requests to your  index.php  file (see Configuration section below).  RewriteEngine on\nRewriteCond %{SCRIPT_FILENAME} !-f\nRewriteCond %{SCRIPT_FILENAME} !-d\nRewriteCond %{SCRIPT_FILENAME} !-l\nRewriteRule ^(.*)$ index.php/$1",
            "title": "Setting up Apache"
        },
        {
            "location": "/3.installation/#setting-up-iis",
            "text": "On IIS you have to add some lines your  web.config  file in the  public  folder or create a new one. If rewriting is not working for you, please check that your IIS version have included the  url rewrite  module or download and install them from Microsoft web site.",
            "title": "Setting up IIS"
        },
        {
            "location": "/3.installation/#webconfig-example",
            "text": "Below is an example of an working  web.config  file used by Solital.  Simply create a new  web.config  file in your projects  public  directory and paste the contents below in your newly created file. This will redirect all requests to your  index.php  file (see Configuration section below). If the  web.config  file already exists, add the  <rewrite>  section inside the  <system.webServer>  branch.  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n    <rewrite>\n      <rules>\n        <!-- Remove slash '/' from the en of the url -->\n        <rule name=\"RewriteRequestsToPublic\">\n          <match url=\"^(.*)$\" />\n          <conditions logicalGrouping=\"MatchAll\" trackAllCaptures=\"false\">\n          </conditions>\n          <action type=\"Rewrite\" url=\"/{R:0}\" />\n        </rule>\n\n        <!-- When requested file or folder don't exists, will request again through index.php -->\n        <rule name=\"Imported Rule 1\" stopProcessing=\"true\">\n          <match url=\"^(.*)$\" ignoreCase=\"true\" />\n          <conditions logicalGrouping=\"MatchAll\">\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n          </conditions>\n          <action type=\"Rewrite\" url=\"/index.php/{R:1}\" appendQueryString=\"true\" />\n        </rule>\n      </rules>\n    </rewrite>\n    </system.webServer>\n</configuration>",
            "title": "web.config example"
        },
        {
            "location": "/3.installation/#troubleshooting",
            "text": "If you do not have a  favicon.ico  file in your project, you can get a  NotFoundHttpException  (404 - not found).  To add  favicon.ico  to the IIS ignore-list, add the following line to the  <conditions>  group:  <add input=\"{REQUEST_FILENAME}\" negate=\"true\" pattern=\"favicon.ico\" ignoreCase=\"true\" />  You can also make one exception for files with some extensions:  <add input=\"{REQUEST_FILENAME}\" pattern=\"\\.ico|\\.png|\\.css|\\.jpg\" negate=\"true\" ignoreCase=\"true\" />  If you are using  $_SERVER['ORIG_PATH_INFO'] , you will get  \\index.php\\  as part of the returned value.   Example:  /index.php/test/mypage.php",
            "title": "Troubleshooting"
        },
        {
            "location": "/3.installation/#helper-functions",
            "text": "We recommend that you add these helper functions to your project. These will allow you to access functionality of the router more easily.",
            "title": "Helper functions"
        },
        {
            "location": "/4.vinci/",
            "text": "Vinci Console\n\n\nVinci is the development assistant at Solital. You can create controllers, models, views, CSS files and JS files in graphical mode right from your browser.\n\n\nAccess Vinci\n\n\nTo access Vinci, open the terminal in your project folder and type php vinci for information.\n\n\nHow to use\n\n\nTo access information about Solital and its dependencies, open your terminal inside your project folder and type \nphp vinci about\n\n\nCreate a component\n\n\nYou can create a new component using the syntax below.\n\n\nphp vinci [component]:[name_file]\n\n\n\n\nExample\n\n\nphp vinci controller:User\n\n\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontroller\n\n\nCreates a new controller\n\n\n\n\n\n\nmodel\n\n\nCreate a new Model\n\n\n\n\n\n\nview\n\n\nCreate a new view\n\n\n\n\n\n\ncss\n\n\nCreate a new CSS file\n\n\n\n\n\n\njs\n\n\nCreate a new JavaScript file\n\n\n\n\n\n\nrouter\n\n\nCreates a new file for the route system\n\n\n\n\n\n\n\n\nTo see the complete list of commands, run \nphp vinci show\n\n\nRemove a component\n\n\nAdd the \nremove-\n command before using one of the aforementioned commands to remove a component created with Vinci.\n\n\nphp vinci remove-controller:user\n\n\n\n\nClearing the cache on solital\n\n\nTo clear the entire solital cache, run the command below.\n\n\nphp vinci cache-clear\n\n\n\n\nLogin structure\n\n\nTo create a predefined login structure, use \nphp vinci auth\n\n\nThis command will create a \nLoginController\n class, templates for authentication and dashboard and predefined routes. Plus a standard user in the database\n\n\nIf you want to remove this structure, use \nphp vinci remove-auth\n\n\nConfigure database\n\n\nThe \ndb.php\n file has the necessary constants for Katrina ORM to communicate with the database. To configure the \ndb.php\n file, run the command\nphp vinci katrina:configure\n\n\nThis command will ask for: database drive, host, database name, database user and password. Remember to enter the values in that order as shown below.\n\n\nEnter the drive, host, database name, username and password for your database separated by commas\n\n\n> mysql, localhost, db_solital, root, root\n\n\n\n\nIf you want to create a standard user in the database, run \nphp vinci katrina:userAuth\n\n\nCustom commands\n\n\nYou can create a custom method to create your tables using the \nSQLCommands\n method.\n\n\n<?php\n\nnamespace Solital\\Database\\Create;\nuse Solital\\Components\\Model\\Model;\nuse Solital\\Database\\Create\\Create;\n\nclass SQLCommands extends Model\n{\n    public function myTable()\n    {\n        # Here will be the commands for creating a table\n    }\n}\n\n\n\n\nAnd in vinci, execute the method as follows:\n\n\nphp vinci katrina:myTable",
            "title": "4. Vinci Console"
        },
        {
            "location": "/4.vinci/#vinci-console",
            "text": "Vinci is the development assistant at Solital. You can create controllers, models, views, CSS files and JS files in graphical mode right from your browser.",
            "title": "Vinci Console"
        },
        {
            "location": "/4.vinci/#access-vinci",
            "text": "To access Vinci, open the terminal in your project folder and type php vinci for information.",
            "title": "Access Vinci"
        },
        {
            "location": "/4.vinci/#how-to-use",
            "text": "To access information about Solital and its dependencies, open your terminal inside your project folder and type  php vinci about",
            "title": "How to use"
        },
        {
            "location": "/4.vinci/#create-a-component",
            "text": "You can create a new component using the syntax below.  php vinci [component]:[name_file]  Example  php vinci controller:User     Command  Description      controller  Creates a new controller    model  Create a new Model    view  Create a new view    css  Create a new CSS file    js  Create a new JavaScript file    router  Creates a new file for the route system     To see the complete list of commands, run  php vinci show",
            "title": "Create a component"
        },
        {
            "location": "/4.vinci/#remove-a-component",
            "text": "Add the  remove-  command before using one of the aforementioned commands to remove a component created with Vinci.  php vinci remove-controller:user",
            "title": "Remove a component"
        },
        {
            "location": "/4.vinci/#clearing-the-cache-on-solital",
            "text": "To clear the entire solital cache, run the command below.  php vinci cache-clear",
            "title": "Clearing the cache on solital"
        },
        {
            "location": "/4.vinci/#login-structure",
            "text": "To create a predefined login structure, use  php vinci auth  This command will create a  LoginController  class, templates for authentication and dashboard and predefined routes. Plus a standard user in the database  If you want to remove this structure, use  php vinci remove-auth",
            "title": "Login structure"
        },
        {
            "location": "/4.vinci/#configure-database",
            "text": "The  db.php  file has the necessary constants for Katrina ORM to communicate with the database. To configure the  db.php  file, run the command php vinci katrina:configure  This command will ask for: database drive, host, database name, database user and password. Remember to enter the values in that order as shown below.  Enter the drive, host, database name, username and password for your database separated by commas\n\n\n> mysql, localhost, db_solital, root, root  If you want to create a standard user in the database, run  php vinci katrina:userAuth  Custom commands  You can create a custom method to create your tables using the  SQLCommands  method.  <?php\n\nnamespace Solital\\Database\\Create;\nuse Solital\\Components\\Model\\Model;\nuse Solital\\Database\\Create\\Create;\n\nclass SQLCommands extends Model\n{\n    public function myTable()\n    {\n        # Here will be the commands for creating a table\n    }\n}  And in vinci, execute the method as follows:  php vinci katrina:myTable",
            "title": "Configure database"
        },
        {
            "location": "/5.components/",
            "text": "Components\n\n\nWolf Template\n\n\nWolf is Solital's standard template system. You can load any template into the \nresource/views\n folder\n\n\nBasic\n\n\nBelow is the basic code to load any template:\n\n\nWolf::loadView('home');\n\n\n\n\nParameters\n\n\nThe sitaxe below loads the parameters to be viewed in your template.\n\n\nWolf::loadView('home', [\n    'title' => 'My Title'\n]);\n\n\n\n\nAnd in your \nhome.php\n, retrieve the value informed in this way:\n\n\n<title>$title</title>\n\n\n\n\nCustom extensions\n\n\nWolf will search for files in php format, but to search for a different format, use the last parameter.\n\n\nWolf::loadView('home', [\n    'title' => 'My Title'\n], false, \"html\");\n\n\n\n\nLoading CSS, JS and images\n\n\nMake sure the files exist in the folder \npublic/assets/_css\n, \npublic/assets/_js\n and \npublic/assets/_img\n\n\nTo upload a CSS file, use the syntax below in your template\n\n\n<link rel=\"stylesheet\" href=\"<? self::loadCss('style.css'); ?>\">\n\n\n\n\nTo upload a JS file, use the syntax below in your template\n\n\n<link rel=\"stylesheet\" href=\"<? self::loadJs('file.js'); ?>\">\n\n\n\n\nTo upload an image, use the syntax below in your template\n\n\n<img src=\"<? self::loadImg('image.png'); ?>\">\n\n\n\n\nCache\n\n\nSee the cache part here to learn how to use the cache in Wolf.\n\n\nMessage\n\n\nMessage helps you when displaying messages in your view. Its syntax is basic as shown below.\n\n\nTo create a new message:\n\n\nuse Solital\\Message\\Message;\n\nMessage::newMessage(\"your_index_message\", \"your_messsage\");\n\n\n\n\nTo retrieve a message:\n\n\nuse Solital\\Message\\Message;\n\nMessage::getMessage(\"your_index_message\");\n\n\n\n\nTo delete a message:\n\n\nuse Solital\\Message\\Message;\n\nMessage::clearMessage(\"your_index_message\");\n\n\n\n\nTo recover and then delete a message:\n\n\nuse Solital\\Message\\Message;\n\nMessage::getMessage(\"your_index_message\");\nMessage::clearMessage(\"your_index_message\");\n\n\n\n\nMail\n\n\nMail is a class of Solital that uses PHP's native mail to send email.\n\n\nUse\n\n\nThe sitaxis below is used to be able to send basic e-mail.\n\n\nuse Solital\\Mail\\Mail;\n\nMail::send(\"your_sender@email.com\", \"your_recipient@email.com\", \n\"your_subject\", \"your_message\");\n\n\n\n\nOptional parameters\n\n\nTo add a reply, text type, charset and priority, use the optional parameters.\n\n\nuse Solital\\Mail\\Mail;\n\nMail::send(\"your_sender@email.com\", \"your_recipient@email.com\", \"your_subject\", \n\"your_message\", [\"your_reply@email.com\", \"type_text\", \"your_charset\", your_priority]);\n\n\n\n\n\nOptional parameters have the following values by default:\n\n\n\n\nReply to: \n(string)\n null\n\n\nType: \n(string)\n text/plan\n\n\nCharset: \n(string)\n UTF-8\n\n\nPriority: \n(int)\n 3",
            "title": "5. Components"
        },
        {
            "location": "/5.components/#components",
            "text": "",
            "title": "Components"
        },
        {
            "location": "/5.components/#wolf-template",
            "text": "Wolf is Solital's standard template system. You can load any template into the  resource/views  folder",
            "title": "Wolf Template"
        },
        {
            "location": "/5.components/#basic",
            "text": "Below is the basic code to load any template:  Wolf::loadView('home');",
            "title": "Basic"
        },
        {
            "location": "/5.components/#parameters",
            "text": "The sitaxe below loads the parameters to be viewed in your template.  Wolf::loadView('home', [\n    'title' => 'My Title'\n]);  And in your  home.php , retrieve the value informed in this way:  <title>$title</title>",
            "title": "Parameters"
        },
        {
            "location": "/5.components/#custom-extensions",
            "text": "Wolf will search for files in php format, but to search for a different format, use the last parameter.  Wolf::loadView('home', [\n    'title' => 'My Title'\n], false, \"html\");",
            "title": "Custom extensions"
        },
        {
            "location": "/5.components/#loading-css-js-and-images",
            "text": "Make sure the files exist in the folder  public/assets/_css ,  public/assets/_js  and  public/assets/_img  To upload a CSS file, use the syntax below in your template  <link rel=\"stylesheet\" href=\"<? self::loadCss('style.css'); ?>\">  To upload a JS file, use the syntax below in your template  <link rel=\"stylesheet\" href=\"<? self::loadJs('file.js'); ?>\">  To upload an image, use the syntax below in your template  <img src=\"<? self::loadImg('image.png'); ?>\">",
            "title": "Loading CSS, JS and images"
        },
        {
            "location": "/5.components/#cache",
            "text": "See the cache part here to learn how to use the cache in Wolf.",
            "title": "Cache"
        },
        {
            "location": "/5.components/#message",
            "text": "Message helps you when displaying messages in your view. Its syntax is basic as shown below.  To create a new message:  use Solital\\Message\\Message;\n\nMessage::newMessage(\"your_index_message\", \"your_messsage\");  To retrieve a message:  use Solital\\Message\\Message;\n\nMessage::getMessage(\"your_index_message\");  To delete a message:  use Solital\\Message\\Message;\n\nMessage::clearMessage(\"your_index_message\");  To recover and then delete a message:  use Solital\\Message\\Message;\n\nMessage::getMessage(\"your_index_message\");\nMessage::clearMessage(\"your_index_message\");",
            "title": "Message"
        },
        {
            "location": "/5.components/#mail",
            "text": "Mail is a class of Solital that uses PHP's native mail to send email.",
            "title": "Mail"
        },
        {
            "location": "/5.components/#use",
            "text": "The sitaxis below is used to be able to send basic e-mail.  use Solital\\Mail\\Mail;\n\nMail::send(\"your_sender@email.com\", \"your_recipient@email.com\", \n\"your_subject\", \"your_message\");",
            "title": "Use"
        },
        {
            "location": "/5.components/#optional-parameters",
            "text": "To add a reply, text type, charset and priority, use the optional parameters.  use Solital\\Mail\\Mail;\n\nMail::send(\"your_sender@email.com\", \"your_recipient@email.com\", \"your_subject\", \n\"your_message\", [\"your_reply@email.com\", \"type_text\", \"your_charset\", your_priority]);  Optional parameters have the following values by default:   Reply to:  (string)  null  Type:  (string)  text/plan  Charset:  (string)  UTF-8  Priority:  (int)  3",
            "title": "Optional parameters"
        },
        {
            "location": "/6.routes/",
            "text": "Routers\n\n\nBasic routing\n\n\nBelow is a very basic example of setting up a route. First parameter is the url which the route should match - next parameter is a \nClosure\n or callback function that will be triggered once the route matches.\n\n\nCourse::get('/', function() {\n    return 'Hello world';\n});\n\n\n\n\nAvailable methods\n\n\nHere you can see a list over all available routes:\n\n\nCourse::get($url, $callback, $settings);\nCourse::post($url, $callback, $settings);\nCourse::put($url, $callback, $settings);\nCourse::patch($url, $callback, $settings);\nCourse::delete($url, $callback, $settings);\nCourse::options($url, $callback, $settings);\n\n\n\n\nMultiple HTTP-verbs\n\n\nSometimes you might need to create a route that accepts multiple HTTP-verbs. If you need to match all HTTP-verbs you can use the \nany\n method.\n\n\nCourse::match(['get', 'post'], '/', function() {\n    // ...\n});\n\nCourse::any('foo', function() {\n    // ...\n});\n\n\n\n\nWe've created a simple method which matches \nGET\n and \nPOST\n which is most commonly used:\n\n\nCourse::form('foo', function() {\n    // ...\n});\n\n\n\n\nRoute parameters\n\n\nRequired parameters\n\n\nYou'll properly wondering by know how you parse parameters from your urls. For example, you might want to capture the users id from an url. You can do so by defining route-parameters.\n\n\nCourse::get('/user/{id}', function ($userId) {\n    return 'User with id: ' . $userId;\n});\n\n\n\n\nYou may define as many route parameters as required by your route:\n\n\nCourse::get('/posts/{post}/comments/{comment}', function ($postId, $commentId) {\n    // ...\n});\n\n\n\n\nNote:\n Route parameters are always encased within {} braces and should consist of alphabetic characters. Route parameters may not contain a - character. Use an underscore (_) instead.\n\n\nOptional parameters\n\n\nOccasionally you may need to specify a route parameter, but make the presence of that route parameter optional. You may do so by placing a ? mark after the parameter name. Make sure to give the route's corresponding variable a default value:\n\n\nCourse::get('/user/{name?}', function ($name = null) {\n    return $name;\n});\n\nCourse::get('/user/{name?}', function ($name = 'Simon') {\n    return $name;\n});\n\n\n\n\nRegular expression constraints\n\n\nYou may constrain the format of your route parameters using the where method on a route instance. The where method accepts the name of the parameter and a regular expression defining how the parameter should be constrained:\n\n\nCourse::get('/user/{name}', function ($name) {\n\n    // ... do stuff\n\n})->where('name', '[A-Za-z]+');\n\nCourse::get('/user/{id}', function ($id) {\n\n    // ... do stuff\n\n})->where('id', '[0-9]+');\n\nCourse::get('/user/{id}/{name}', function ($id, $name) {\n\n    // ... do stuff\n\n})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n\n\n\n\nRegular expression route-match\n\n\nYou can define a regular-expression match for the entire route if you wish.\n\n\nThis is useful if you for example are creating a model-box which loads urls from ajax.\n\n\nThe example below is using the following regular expression: \n/ajax/([\\w]+)/?([0-9]+)?/?\n which basically just matches \n/ajax/\n and exspects the next parameter to be a string - and the next to be a number (but optional).\n\n\nMatches:\n \n/ajax/abc/\n, \n/ajax/abc/123/\n\n\nWon't match:\n \n/ajax/\n\n\nMatch groups specified in the regex will be passed on as parameters:\n\n\nCourse::all('/ajax/abc/123', function($param1, $param2) {\n    // param1 = abc\n    // param2 = 123\n})->setMatch('/\\/ajax\\/([\\w]+)\\/?([0-9]+)?\\/?/is');\n\n\n\n\nCustom regex for matching parameters\n\n\nBy default Solital uses the \n\\w\n regular expression when matching parameters.\nThis decision was made with speed and reliability in mind, as this match will match both letters, number and most of the used symbols on the internet.\n\n\nHowever, sometimes it can be necessary to add a custom regular expression to match more advanced characters like \n-\n etc.\n\n\nInstead of adding a custom regular expression to all your parameters, you can simply add a global regular expression which will be used on all the parameters on the route.\n\n\nNote:\n If you the regular expression to be available across, we recommend using the global parameter on a group as demonstrated in the examples below.\n\n\nExample\n\n\nThis example will ensure that all parameters use the \n[\\w\\-]+\n regular expression when parsing.\n\n\nCourse::get('/path/{parameter}', 'VideoController@home', ['defaultParameterRegex' => '[\\w\\-]+']);\n\n\n\n\nYou can also apply this setting to a group if you need multiple routes to use your custom regular expression when parsing parameters.\n\n\nCourse::group(['defaultParameterRegex' => '[\\w\\-]+'], function() {\n\n    Course::get('/path/{parameter}', 'VideoController@home');\n\n});\n\n\n\n\nNamed routes\n\n\nNamed routes allow the convenient generation of URLs or redirects for specific routes. You may specify a name for a route by chaining the name method onto the route definition:\n\n\nCourse::get('/user/profile', function () {\n    // Your code here\n})->name('profile');\n\n\n\n\nYou can also specify names for Controller-actions:\n\n\nCourse::get('/user/profile', 'UserController@profile')->name('profile');\n\n\n\n\nGenerating URLs To Named Routes\n\n\nOnce you have assigned a name to a given route, you may use the route's name when generating URLs or redirects via the global \nurl\n helper-function (see helpers section):\n\n\n// Generating URLs...\n$url = url('profile');\n\n\n\n\nIf the named route defines parameters, you may pass the parameters as the second argument to the \nurl\n function. The given parameters will automatically be inserted into the URL in their correct positions:\n\n\nCourse::get('/user/{id}/profile', function ($id) {\n    //\n})->name('profile');\n\n$url = url('profile', ['id' => 1]);\n\n\n\n\nFor more information on urls, please see the \nUrls\n section.\n\n\nRouter groups\n\n\nRoute groups allow you to share route attributes, such as middleware or namespaces, across a large number of routes without needing to define those attributes on each individual route. Shared attributes are specified in an array format as the first parameter to the \nCourse::group\n method.\n\n\nMiddleware\n\n\nTo assign middleware to all routes within a group, you may use the middleware key in the group attribute array. Middleware are executed in the order they are listed in the array:\n\n\nCourse::group(['middleware' => \\Demo\\Middleware\\Auth::class], function () {\n    Course::get('/', function ()    {\n        // Uses Auth Middleware\n    });\n\n    Course::get('/user/profile', function () {\n        // Uses Auth Middleware\n    });\n});\n\n\n\n\nNamespaces\n\n\nSolital already has the default namespace to search for controllers (\nSolital\\Components\\Controller\n)\n\n\nNote\n\n\nGroup namespaces will only be added to routes with relative callbacks.\nFor example if your route has an absolute callback like \nUserController@home\n, the namespace from the route will not be prepended.\nTo fix this you can make the callback relative by removing the \n\\\n in the beginning of the callback.\n\n\nCourse::group(['namespace' => 'Admin'], function () {\n    // Controllers Within The \"App\\Http\\Controllers\\Admin\" Namespace\n});\n\n\n\n\nSubdomain-routing\n\n\nRoute groups may also be used to handle sub-domain routing. Sub-domains may be assigned route parameters just like route urls, allowing you to capture a portion of the sub-domain for usage in your route or controller. The sub-domain may be specified using the \ndomain\n key on the group attribute array:\n\n\nCourse::group(['domain' => '{account}.myapp.com'], function () {\n    Course::get('/user/{id}', function ($account, $id) {\n        //\n    });\n});\n\n\n\n\nRoute prefixes\n\n\nThe \nprefix\n group attribute may be used to prefix each route in the group with a given url. For example, you may want to prefix all route urls within the group with \nadmin\n:\n\n\nCourse::group(['prefix' => '/admin'], function () {\n    Course::get('/users', function ()    {\n        // Matches The \"/admin/users\" URL\n    });\n});\n\n\n\n\nPartial groups\n\n\nPartial router groups has the same benefits as a normal group, but supports parameters and are only rendered once the url has matched.\n\n\nThis can be extremely useful in situations, where you only want special routes to be added, when a certain criteria or logic has been met.\n\n\nNOTE:\n Use partial groups with caution as routes added within are only rendered and available once the url of the partial-group has matched. This can cause \nurl()\n not to find urls for the routes added within.\n\n\nExample:\n\n\nCourse::partialGroup('/admin/{applicationId}', function ($applicationId) {\n\n    Course::get('/', function($applicationId) {\n\n        // Matches The \"/admin/applicationId\" URL\n\n    });\n\n});\n\n\n\n\nException\n\n\nExceptionHandler are classes that handles all exceptions. ExceptionsHandlers must implement the \nExceptionHandlerInterface\n interface.\n\n\nHandling 404, 403 and other errors\n\n\nIf you simply want to catch a 404 (page not found) etc. you can use the \nRouter::error($callback)\n static helper method.\n\n\nThis will add a callback method which is fired whenever an error occurs on all routes.\n\n\nThe basic example below simply redirect the page to \n/not-found\n if an \nNotFoundHttpException\n (404) occurred.\nThe code should be placed in the file that contains your routes.\n\n\nRouter::get('/not-found', 'PageController@notFound');\n\nRouter::error(function(Request $request, \\Exception $exception) {\n\n    if($exception instanceof NotFoundHttpException && $exception->getCode() === 404) {\n        response()->redirect('/not-found');\n    }\n\n});\n\n\n\n\nUsing custom exception handlers\n\n\nThis is a basic example of an ExceptionHandler implementation (please see \"\nEasily overwrite route about to be loaded\n\" for examples on how to change callback).\n\n\nnamespace Demo\\Handlers;\n\nuse Solital\\Core\\Http\\Request;\nuse Solital\\Core\\Handlers\\ExceptionHandlerInterface;\nuse Solital\\Core\\Exceptions\\NotFoundHttpException;\n\nclass CustomExceptionHandler implements ExceptionHandlerInterface\n{\n    public function handleError(Request $request, \\Exception $error): void\n    {\n\n        /* You can use the exception handler to format errors depending on the request and type. */\n\n        if ($request->getUri()->contains('/api')) {\n\n            response()->json([\n                'error' => $error->getMessage(),\n                'code'  => $error->getCode(),\n            ]);\n\n        }\n\n        /* The router will throw the NotFoundHttpException on 404 */\n        if($error instanceof NotFoundHttpException) {\n\n            // Render custom 404-page\n            $request->setRewriteCallback('PageController@notFound');\n            return;\n\n        }\n\n        throw $error;\n    }\n}\n\n\n\n\n\n\nURL Rewriting\n\n\nChanging current route\n\n\nSometimes it can be useful to manipulate the route about to be loaded.\nSolital allows you to easily manipulate and change the routes which are about to be rendered.\nAll information about the current route is stored in the \n\\Solital\\Core\\Course\\Router\n instance's \nloadedRoute\n property.\n\n\nFor easy access you can use the shortcut helper function \nrequest()\n instead of calling the class directly \n\\Solital\\Core\\Course\\Course::router()\n.\n\n\nrequest()->setRewriteCallback('Example\\MyCustomClass@hello');\n\n// -- or you can rewrite by url --\n\nrequest()->setRewriteUrl('/my-rewrite-url');\n\n\n\n\nBootmanager: loading routes dynamically\n\n\nSometimes it can be necessary to keep urls stored in the database, file or similar. In this example, we want the url \n/my-cat-is-beatiful\n to load the route \n/article/view/1\n which the router knows, because it's defined in the \nroutes.php\n file.\n\n\nTo interfere with the router, we create a class that implements the \nRouterBootManagerInterface\n interface. This class will be loaded before any other rules in \nroutes.php\n and allow us to \"change\" the current route, if any of our criteria are fulfilled (like coming from the url \n/my-cat-is-beatiful\n).\n\n\nuse Solital\\Core\\Http\\Request;\nuse Solital\\Core\\Course\\RouterBootManagerInterface;\nuse Solital\\Core\\Course\\Router;\n\nclass CustomRouterRules implements RouterBootManagerInterface \n{\n\n    /**\n     * Called when router is booting and before the routes is loaded.\n     *\n     * @param \\Solital\\Core\\Course\\Router $router\n     * @param \\Solital\\Core\\Http\\Request $request\n     */\n    public function boot(\\Solital\\Core\\Course\\Router $router, \\Solital\\Core\\Http\\Request $request): void\n    {\n\n        $rewriteRules = [\n            '/my-cat-is-beatiful' => '/article/view/1',\n            '/horses-are-great'   => '/article/view/2',\n        ];\n\n        foreach($rewriteRules as $url => $rule) {\n\n            // If the current url matches the rewrite url, we use our custom route\n\n            if($request->getUri()->getPath() === $url) {\n                $request->setRewriteUrl($rule);\n            }\n        }\n\n    }\n\n}\n\n\n\n\nThe above should be pretty self-explanatory and can easily be changed to loop through urls store in the database, file or cache.\n\n\nWhat happens is that if the current route matches the route defined in the index of our \n$rewriteRules\n array, we set the route to the array value instead.\n\n\nBy doing this the route will now load the url \n/article/view/1\n instead of \n/my-cat-is-beatiful\n.\n\n\nThe last thing we need to do, is to add our custom boot-manager to the \nroutes.php\n file. You can create as many bootmanagers as you like and easily add them in your \nroutes.php\n file.\n\n\nCourse::addBootManager(new CustomRouterRules());\n\n\n\n\nAdding routes manually\n\n\nThe \nCourse\n class referenced in the previous example, is just a simple helper class that knows how to communicate with the \nRouter\n class.\nIf you are up for a challenge, want the full control or simply just want to create your own \nRouter\n helper class, this example is for you.\n\n\nuse \\Solital\\Core\\Course\\Router;\nuse \\Solital\\Core\\Course\\Route\\RouteUrl;\n\n/* Create new Router instance */\n$router = new Router();\n\n$route = new RouteUrl('/answer/1', function() {\n\n    die('this callback will match /answer/1');\n\n});\n\n$route->addMiddleware(\\Demo\\Middlewares\\AuthMiddleware::class);\n$route->setNamespace('\\Demo\\Controllers');\n$route->setPrefix('v1');\n\n/* Add the route to the router */\n$router->addRoute($route);\n\n\n\n\nExtending\n\n\nThis is a simple example of an integration into a framework.\n\n\nThe framework has it's own \nRouter\n class which inherits from the \nCourse\n class. This allows the framework to add custom functionality like loading a custom \nroutes.php\n file or add debugging information etc.\n\n\nnamespace Demo;\n\nuse Solital\\Core\\Course\\Course;\n\nclass Router extends Course {\n\n    public static function start() {\n\n        // change default namespace for all routes\n        parent::setDefaultNamespace('\\Demo\\Controllers');\n\n        // change this to whatever makes sense in your project\n        require_once 'routes.php';\n\n        // Do initial stuff\n        parent::start();\n\n    }\n\n}\n\n\n\n\n\n\nForm Method Spoofing\n\n\nHTML forms do not support \nPUT\n, \nPATCH\n or \nDELETE\n actions. So, when defining \nPUT\n, \nPATCH\n or \nDELETE\n routes that are called from an HTML form, you will need to add a hidden \n_method\n field to the form. The value sent with the \n_method\n field will be used as the HTTP request method:\n\n\n<input type=\"hidden\" name=\"_method\" value=\"PUT\" />\n\n\n\n\nAccessing The Current Route\n\n\nYou can access information about the current route loaded by using the following method:\n\n\nCourse::request()->getLoadedRoute();\nrequest()->getLoadedRoute();\n\n\n\n\nOther examples\n\n\nYou can find many other examples in the sample file below:\n\n\n<?php\nuse Solital\\Core\\Course\\Course;\n\n/* Adding custom csrfVerifier here */\nCourse::csrfVerifier(new \\Demo\\Middlewares\\CsrfVerifier());\n\nCourse::group(['middleware' => \\Demo\\Middlewares\\Site::class, 'exceptionHandler' => \\Demo\\Handlers\\CustomExceptionHandler::class], function() {\n\n    Course::get('/answers/{id}', 'ControllerAnswers@show', ['where' => ['id' => '[0-9]+']]);\n\n    /**\n     * Restful resource (see IRestController interface for available methods)\n     */\n\n    Course::resource('/rest', ControllerRessource::class);\n\n    /**\n     * Load the entire controller (where url matches method names - getIndex(), postIndex(), putIndex()).\n     * The url paths will determine which method to render.\n     *\n     * For example:\n     *\n     * GET  /animals         => getIndex()\n     * GET  /animals/view    => getView()\n     * POST /animals/save    => postSave()\n     *\n     * etc.\n     */\n\n    Course::controller('/animals', ControllerAnimals::class);\n\n});\n\nCourse::get('/page/404', 'ControllerPage@notFound', ['as' => 'page.notfound']);",
            "title": "6. Routes"
        },
        {
            "location": "/6.routes/#routers",
            "text": "",
            "title": "Routers"
        },
        {
            "location": "/6.routes/#basic-routing",
            "text": "Below is a very basic example of setting up a route. First parameter is the url which the route should match - next parameter is a  Closure  or callback function that will be triggered once the route matches.  Course::get('/', function() {\n    return 'Hello world';\n});",
            "title": "Basic routing"
        },
        {
            "location": "/6.routes/#available-methods",
            "text": "Here you can see a list over all available routes:  Course::get($url, $callback, $settings);\nCourse::post($url, $callback, $settings);\nCourse::put($url, $callback, $settings);\nCourse::patch($url, $callback, $settings);\nCourse::delete($url, $callback, $settings);\nCourse::options($url, $callback, $settings);",
            "title": "Available methods"
        },
        {
            "location": "/6.routes/#multiple-http-verbs",
            "text": "Sometimes you might need to create a route that accepts multiple HTTP-verbs. If you need to match all HTTP-verbs you can use the  any  method.  Course::match(['get', 'post'], '/', function() {\n    // ...\n});\n\nCourse::any('foo', function() {\n    // ...\n});  We've created a simple method which matches  GET  and  POST  which is most commonly used:  Course::form('foo', function() {\n    // ...\n});",
            "title": "Multiple HTTP-verbs"
        },
        {
            "location": "/6.routes/#route-parameters",
            "text": "",
            "title": "Route parameters"
        },
        {
            "location": "/6.routes/#required-parameters",
            "text": "You'll properly wondering by know how you parse parameters from your urls. For example, you might want to capture the users id from an url. You can do so by defining route-parameters.  Course::get('/user/{id}', function ($userId) {\n    return 'User with id: ' . $userId;\n});  You may define as many route parameters as required by your route:  Course::get('/posts/{post}/comments/{comment}', function ($postId, $commentId) {\n    // ...\n});  Note:  Route parameters are always encased within {} braces and should consist of alphabetic characters. Route parameters may not contain a - character. Use an underscore (_) instead.",
            "title": "Required parameters"
        },
        {
            "location": "/6.routes/#optional-parameters",
            "text": "Occasionally you may need to specify a route parameter, but make the presence of that route parameter optional. You may do so by placing a ? mark after the parameter name. Make sure to give the route's corresponding variable a default value:  Course::get('/user/{name?}', function ($name = null) {\n    return $name;\n});\n\nCourse::get('/user/{name?}', function ($name = 'Simon') {\n    return $name;\n});",
            "title": "Optional parameters"
        },
        {
            "location": "/6.routes/#regular-expression-constraints",
            "text": "You may constrain the format of your route parameters using the where method on a route instance. The where method accepts the name of the parameter and a regular expression defining how the parameter should be constrained:  Course::get('/user/{name}', function ($name) {\n\n    // ... do stuff\n\n})->where('name', '[A-Za-z]+');\n\nCourse::get('/user/{id}', function ($id) {\n\n    // ... do stuff\n\n})->where('id', '[0-9]+');\n\nCourse::get('/user/{id}/{name}', function ($id, $name) {\n\n    // ... do stuff\n\n})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);",
            "title": "Regular expression constraints"
        },
        {
            "location": "/6.routes/#regular-expression-route-match",
            "text": "You can define a regular-expression match for the entire route if you wish.  This is useful if you for example are creating a model-box which loads urls from ajax.  The example below is using the following regular expression:  /ajax/([\\w]+)/?([0-9]+)?/?  which basically just matches  /ajax/  and exspects the next parameter to be a string - and the next to be a number (but optional).  Matches:   /ajax/abc/ ,  /ajax/abc/123/  Won't match:   /ajax/  Match groups specified in the regex will be passed on as parameters:  Course::all('/ajax/abc/123', function($param1, $param2) {\n    // param1 = abc\n    // param2 = 123\n})->setMatch('/\\/ajax\\/([\\w]+)\\/?([0-9]+)?\\/?/is');",
            "title": "Regular expression route-match"
        },
        {
            "location": "/6.routes/#custom-regex-for-matching-parameters",
            "text": "By default Solital uses the  \\w  regular expression when matching parameters.\nThis decision was made with speed and reliability in mind, as this match will match both letters, number and most of the used symbols on the internet.  However, sometimes it can be necessary to add a custom regular expression to match more advanced characters like  -  etc.  Instead of adding a custom regular expression to all your parameters, you can simply add a global regular expression which will be used on all the parameters on the route.  Note:  If you the regular expression to be available across, we recommend using the global parameter on a group as demonstrated in the examples below.",
            "title": "Custom regex for matching parameters"
        },
        {
            "location": "/6.routes/#example",
            "text": "This example will ensure that all parameters use the  [\\w\\-]+  regular expression when parsing.  Course::get('/path/{parameter}', 'VideoController@home', ['defaultParameterRegex' => '[\\w\\-]+']);  You can also apply this setting to a group if you need multiple routes to use your custom regular expression when parsing parameters.  Course::group(['defaultParameterRegex' => '[\\w\\-]+'], function() {\n\n    Course::get('/path/{parameter}', 'VideoController@home');\n\n});",
            "title": "Example"
        },
        {
            "location": "/6.routes/#named-routes",
            "text": "Named routes allow the convenient generation of URLs or redirects for specific routes. You may specify a name for a route by chaining the name method onto the route definition:  Course::get('/user/profile', function () {\n    // Your code here\n})->name('profile');  You can also specify names for Controller-actions:  Course::get('/user/profile', 'UserController@profile')->name('profile');",
            "title": "Named routes"
        },
        {
            "location": "/6.routes/#generating-urls-to-named-routes",
            "text": "Once you have assigned a name to a given route, you may use the route's name when generating URLs or redirects via the global  url  helper-function (see helpers section):  // Generating URLs...\n$url = url('profile');  If the named route defines parameters, you may pass the parameters as the second argument to the  url  function. The given parameters will automatically be inserted into the URL in their correct positions:  Course::get('/user/{id}/profile', function ($id) {\n    //\n})->name('profile');\n\n$url = url('profile', ['id' => 1]);  For more information on urls, please see the  Urls  section.",
            "title": "Generating URLs To Named Routes"
        },
        {
            "location": "/6.routes/#router-groups",
            "text": "Route groups allow you to share route attributes, such as middleware or namespaces, across a large number of routes without needing to define those attributes on each individual route. Shared attributes are specified in an array format as the first parameter to the  Course::group  method.",
            "title": "Router groups"
        },
        {
            "location": "/6.routes/#middleware",
            "text": "To assign middleware to all routes within a group, you may use the middleware key in the group attribute array. Middleware are executed in the order they are listed in the array:  Course::group(['middleware' => \\Demo\\Middleware\\Auth::class], function () {\n    Course::get('/', function ()    {\n        // Uses Auth Middleware\n    });\n\n    Course::get('/user/profile', function () {\n        // Uses Auth Middleware\n    });\n});",
            "title": "Middleware"
        },
        {
            "location": "/6.routes/#namespaces",
            "text": "Solital already has the default namespace to search for controllers ( Solital\\Components\\Controller )",
            "title": "Namespaces"
        },
        {
            "location": "/6.routes/#note",
            "text": "Group namespaces will only be added to routes with relative callbacks.\nFor example if your route has an absolute callback like  UserController@home , the namespace from the route will not be prepended.\nTo fix this you can make the callback relative by removing the  \\  in the beginning of the callback.  Course::group(['namespace' => 'Admin'], function () {\n    // Controllers Within The \"App\\Http\\Controllers\\Admin\" Namespace\n});",
            "title": "Note"
        },
        {
            "location": "/6.routes/#subdomain-routing",
            "text": "Route groups may also be used to handle sub-domain routing. Sub-domains may be assigned route parameters just like route urls, allowing you to capture a portion of the sub-domain for usage in your route or controller. The sub-domain may be specified using the  domain  key on the group attribute array:  Course::group(['domain' => '{account}.myapp.com'], function () {\n    Course::get('/user/{id}', function ($account, $id) {\n        //\n    });\n});",
            "title": "Subdomain-routing"
        },
        {
            "location": "/6.routes/#route-prefixes",
            "text": "The  prefix  group attribute may be used to prefix each route in the group with a given url. For example, you may want to prefix all route urls within the group with  admin :  Course::group(['prefix' => '/admin'], function () {\n    Course::get('/users', function ()    {\n        // Matches The \"/admin/users\" URL\n    });\n});",
            "title": "Route prefixes"
        },
        {
            "location": "/6.routes/#partial-groups",
            "text": "Partial router groups has the same benefits as a normal group, but supports parameters and are only rendered once the url has matched.  This can be extremely useful in situations, where you only want special routes to be added, when a certain criteria or logic has been met.  NOTE:  Use partial groups with caution as routes added within are only rendered and available once the url of the partial-group has matched. This can cause  url()  not to find urls for the routes added within.  Example:  Course::partialGroup('/admin/{applicationId}', function ($applicationId) {\n\n    Course::get('/', function($applicationId) {\n\n        // Matches The \"/admin/applicationId\" URL\n\n    });\n\n});",
            "title": "Partial groups"
        },
        {
            "location": "/6.routes/#exception",
            "text": "ExceptionHandler are classes that handles all exceptions. ExceptionsHandlers must implement the  ExceptionHandlerInterface  interface.",
            "title": "Exception"
        },
        {
            "location": "/6.routes/#handling-404-403-and-other-errors",
            "text": "If you simply want to catch a 404 (page not found) etc. you can use the  Router::error($callback)  static helper method.  This will add a callback method which is fired whenever an error occurs on all routes.  The basic example below simply redirect the page to  /not-found  if an  NotFoundHttpException  (404) occurred.\nThe code should be placed in the file that contains your routes.  Router::get('/not-found', 'PageController@notFound');\n\nRouter::error(function(Request $request, \\Exception $exception) {\n\n    if($exception instanceof NotFoundHttpException && $exception->getCode() === 404) {\n        response()->redirect('/not-found');\n    }\n\n});",
            "title": "Handling 404, 403 and other errors"
        },
        {
            "location": "/6.routes/#using-custom-exception-handlers",
            "text": "This is a basic example of an ExceptionHandler implementation (please see \" Easily overwrite route about to be loaded \" for examples on how to change callback).  namespace Demo\\Handlers;\n\nuse Solital\\Core\\Http\\Request;\nuse Solital\\Core\\Handlers\\ExceptionHandlerInterface;\nuse Solital\\Core\\Exceptions\\NotFoundHttpException;\n\nclass CustomExceptionHandler implements ExceptionHandlerInterface\n{\n    public function handleError(Request $request, \\Exception $error): void\n    {\n\n        /* You can use the exception handler to format errors depending on the request and type. */\n\n        if ($request->getUri()->contains('/api')) {\n\n            response()->json([\n                'error' => $error->getMessage(),\n                'code'  => $error->getCode(),\n            ]);\n\n        }\n\n        /* The router will throw the NotFoundHttpException on 404 */\n        if($error instanceof NotFoundHttpException) {\n\n            // Render custom 404-page\n            $request->setRewriteCallback('PageController@notFound');\n            return;\n\n        }\n\n        throw $error;\n    }\n}",
            "title": "Using custom exception handlers"
        },
        {
            "location": "/6.routes/#url-rewriting",
            "text": "",
            "title": "URL Rewriting"
        },
        {
            "location": "/6.routes/#changing-current-route",
            "text": "Sometimes it can be useful to manipulate the route about to be loaded.\nSolital allows you to easily manipulate and change the routes which are about to be rendered.\nAll information about the current route is stored in the  \\Solital\\Core\\Course\\Router  instance's  loadedRoute  property.  For easy access you can use the shortcut helper function  request()  instead of calling the class directly  \\Solital\\Core\\Course\\Course::router() .  request()->setRewriteCallback('Example\\MyCustomClass@hello');\n\n// -- or you can rewrite by url --\n\nrequest()->setRewriteUrl('/my-rewrite-url');",
            "title": "Changing current route"
        },
        {
            "location": "/6.routes/#bootmanager-loading-routes-dynamically",
            "text": "Sometimes it can be necessary to keep urls stored in the database, file or similar. In this example, we want the url  /my-cat-is-beatiful  to load the route  /article/view/1  which the router knows, because it's defined in the  routes.php  file.  To interfere with the router, we create a class that implements the  RouterBootManagerInterface  interface. This class will be loaded before any other rules in  routes.php  and allow us to \"change\" the current route, if any of our criteria are fulfilled (like coming from the url  /my-cat-is-beatiful ).  use Solital\\Core\\Http\\Request;\nuse Solital\\Core\\Course\\RouterBootManagerInterface;\nuse Solital\\Core\\Course\\Router;\n\nclass CustomRouterRules implements RouterBootManagerInterface \n{\n\n    /**\n     * Called when router is booting and before the routes is loaded.\n     *\n     * @param \\Solital\\Core\\Course\\Router $router\n     * @param \\Solital\\Core\\Http\\Request $request\n     */\n    public function boot(\\Solital\\Core\\Course\\Router $router, \\Solital\\Core\\Http\\Request $request): void\n    {\n\n        $rewriteRules = [\n            '/my-cat-is-beatiful' => '/article/view/1',\n            '/horses-are-great'   => '/article/view/2',\n        ];\n\n        foreach($rewriteRules as $url => $rule) {\n\n            // If the current url matches the rewrite url, we use our custom route\n\n            if($request->getUri()->getPath() === $url) {\n                $request->setRewriteUrl($rule);\n            }\n        }\n\n    }\n\n}  The above should be pretty self-explanatory and can easily be changed to loop through urls store in the database, file or cache.  What happens is that if the current route matches the route defined in the index of our  $rewriteRules  array, we set the route to the array value instead.  By doing this the route will now load the url  /article/view/1  instead of  /my-cat-is-beatiful .  The last thing we need to do, is to add our custom boot-manager to the  routes.php  file. You can create as many bootmanagers as you like and easily add them in your  routes.php  file.  Course::addBootManager(new CustomRouterRules());",
            "title": "Bootmanager: loading routes dynamically"
        },
        {
            "location": "/6.routes/#adding-routes-manually",
            "text": "The  Course  class referenced in the previous example, is just a simple helper class that knows how to communicate with the  Router  class.\nIf you are up for a challenge, want the full control or simply just want to create your own  Router  helper class, this example is for you.  use \\Solital\\Core\\Course\\Router;\nuse \\Solital\\Core\\Course\\Route\\RouteUrl;\n\n/* Create new Router instance */\n$router = new Router();\n\n$route = new RouteUrl('/answer/1', function() {\n\n    die('this callback will match /answer/1');\n\n});\n\n$route->addMiddleware(\\Demo\\Middlewares\\AuthMiddleware::class);\n$route->setNamespace('\\Demo\\Controllers');\n$route->setPrefix('v1');\n\n/* Add the route to the router */\n$router->addRoute($route);",
            "title": "Adding routes manually"
        },
        {
            "location": "/6.routes/#extending",
            "text": "This is a simple example of an integration into a framework.  The framework has it's own  Router  class which inherits from the  Course  class. This allows the framework to add custom functionality like loading a custom  routes.php  file or add debugging information etc.  namespace Demo;\n\nuse Solital\\Core\\Course\\Course;\n\nclass Router extends Course {\n\n    public static function start() {\n\n        // change default namespace for all routes\n        parent::setDefaultNamespace('\\Demo\\Controllers');\n\n        // change this to whatever makes sense in your project\n        require_once 'routes.php';\n\n        // Do initial stuff\n        parent::start();\n\n    }\n\n}",
            "title": "Extending"
        },
        {
            "location": "/6.routes/#form-method-spoofing",
            "text": "HTML forms do not support  PUT ,  PATCH  or  DELETE  actions. So, when defining  PUT ,  PATCH  or  DELETE  routes that are called from an HTML form, you will need to add a hidden  _method  field to the form. The value sent with the  _method  field will be used as the HTTP request method:  <input type=\"hidden\" name=\"_method\" value=\"PUT\" />",
            "title": "Form Method Spoofing"
        },
        {
            "location": "/6.routes/#accessing-the-current-route",
            "text": "You can access information about the current route loaded by using the following method:  Course::request()->getLoadedRoute();\nrequest()->getLoadedRoute();",
            "title": "Accessing The Current Route"
        },
        {
            "location": "/6.routes/#other-examples",
            "text": "You can find many other examples in the sample file below:  <?php\nuse Solital\\Core\\Course\\Course;\n\n/* Adding custom csrfVerifier here */\nCourse::csrfVerifier(new \\Demo\\Middlewares\\CsrfVerifier());\n\nCourse::group(['middleware' => \\Demo\\Middlewares\\Site::class, 'exceptionHandler' => \\Demo\\Handlers\\CustomExceptionHandler::class], function() {\n\n    Course::get('/answers/{id}', 'ControllerAnswers@show', ['where' => ['id' => '[0-9]+']]);\n\n    /**\n     * Restful resource (see IRestController interface for available methods)\n     */\n\n    Course::resource('/rest', ControllerRessource::class);\n\n    /**\n     * Load the entire controller (where url matches method names - getIndex(), postIndex(), putIndex()).\n     * The url paths will determine which method to render.\n     *\n     * For example:\n     *\n     * GET  /animals         => getIndex()\n     * GET  /animals/view    => getView()\n     * POST /animals/save    => postSave()\n     *\n     * etc.\n     */\n\n    Course::controller('/animals', ControllerAnimals::class);\n\n});\n\nCourse::get('/page/404', 'ControllerPage@notFound', ['as' => 'page.notfound']);",
            "title": "Other examples"
        },
        {
            "location": "/7.requisitions/",
            "text": "Requisitions\n\n\nSessions and Cookies\n\n\nCreate session and cookie\n\n\nThe operation of the sessions and cookies are the same. To create a session, the first parameter reports the session index or the second value of it.\n\n\nuse Solital\\Session\\Session;\n\nSession::new('your_index', 'your_value');\n\n\n\n\nAnd for Cookies.\n\n\nuse Solital\\Cookie\\Cookie;\n\nCookie::new('your_index', 'your_value');\n\n\n\n\nDisplay session and cookie\n\n\nTo display a session and cookie, use a syntax below.\n\n\nSession::show('your_index');\n\nCookie::show('your_index');\n\n\n\n\nDelete session and cookie\n\n\nTo delete a session and cookie, use a syntax below.\n\n\nSession::delete('your_index');\n\nCookie::delete('your_index');",
            "title": "7. Requisitions"
        },
        {
            "location": "/7.requisitions/#requisitions",
            "text": "",
            "title": "Requisitions"
        },
        {
            "location": "/7.requisitions/#sessions-and-cookies",
            "text": "",
            "title": "Sessions and Cookies"
        },
        {
            "location": "/7.requisitions/#create-session-and-cookie",
            "text": "The operation of the sessions and cookies are the same. To create a session, the first parameter reports the session index or the second value of it.  use Solital\\Session\\Session;\n\nSession::new('your_index', 'your_value');  And for Cookies.  use Solital\\Cookie\\Cookie;\n\nCookie::new('your_index', 'your_value');",
            "title": "Create session and cookie"
        },
        {
            "location": "/7.requisitions/#display-session-and-cookie",
            "text": "To display a session and cookie, use a syntax below.  Session::show('your_index');\n\nCookie::show('your_index');",
            "title": "Display session and cookie"
        },
        {
            "location": "/7.requisitions/#delete-session-and-cookie",
            "text": "To delete a session and cookie, use a syntax below.  Session::delete('your_index');\n\nCookie::delete('your_index');",
            "title": "Delete session and cookie"
        },
        {
            "location": "/8.input.params/",
            "text": "Input & parameters\n\n\nSolital offers libraries and helpers that makes it easy to manage and manipulate input-parameters like \n$_POST\n, \n$_GET\n and \n$_FILE\n.\n\n\nUsing the Input class to manage parameters\n\n\nYou can use the \nInputHandler\n class to easily access and manage parameters from your request. The \nInputHandler\n class offers extended features such as copying/moving uploaded files directly on the object, getting file-extension, mime-type etc.\n\n\nGet single parameter value\n\n\ninput($index, $defaultValue, ...$methods);\n\n\nTo quickly get a value from a parameter, you can use the \ninput\n helper function.\n\n\nThis will automatically trim the value and ensure that it's not empty. If it's empty the \n$defaultValue\n will be returned instead.\n\n\nNote:\n \nThis function returns a \nstring\n unless the parameters are grouped together, in that case it will return an \narray\n of values.\n\n\nExample:\n\n\nThis example matches both POST and GET request-methods and if name is empty the default-value \"Guest\" will be returned. \n\n\n$name = input('name', 'Guest', 'post', 'get');\n\n\n\n\nGet parameter object\n\n\nWhen dealing with file-uploads it can be useful to retrieve the raw parameter object.\n\n\nSearch for object with default-value across multiple or specific request-methods:\n\n\nThe example below will return an \nInputItem\n object if the parameter was found or return the \n$defaultValue\n. If parameters are grouped, it will return an array of \nInputItem\n objects.\n\n\n$object = input()->find($index, $defaultValue = null, ...$methods);\n\n\n\n\nGetting specific \n$_GET\n parameter as \nInputItem\n object:\n\n\nThe example below will return an \nInputItem\n object if the parameter was found or return the \n$defaultValue\n. If parameters are grouped, it will return an array of \nInputItem\n objects.\n\n\n$object = input()->get($index, $defaultValue = null);\n\n\n\n\nGetting specific \n$_POST\n parameter as \nInputItem\n object:\n\n\nThe example below will return an \nInputItem\n object if the parameter was found or return the \n$defaultValue\n. If parameters are grouped, it will return an array of \nInputItem\n objects.\n\n\n$object = input()->post($index, $defaultValue = null);\n\n\n\n\nGetting specific \n$_FILE\n parameter as \nInputFile\n object:\n\n\nThe example below will return an \nInputFile\n object if the parameter was found or return the \n$defaultValue\n. If parameters are grouped, it will return an array of \nInputFile\n objects.\n\n\n$object = input()->file($index, $defaultValue = null);\n\n\n\n\nManaging files\n\n\n/**\n * Loop through a collection of files uploaded from a form on the page like this\n * <input type=\"file\" name=\"images[]\" />\n */\n\n/* @var $image \\Solital\\Core\\Http\\Input\\InputFile */\nforeach(input()->file('images', []) as $image)\n{\n    if($image->getMime() === 'image/jpeg') \n    {\n        $destinationFilname = sprintf('%s.%s', uniqid(), $image->getExtension());\n        $image->move(sprintf('/uploads/%s', $destinationFilename));\n    }\n}\n\n\n\n\n\nGet all parameters\n\n\n# Get all\n$values = input()->all();\n\n# Only match specific keys\n$values = input()->all([\n    'company_name',\n    'user_id'\n]);\n\n\n\n\nAll object implements the \nInputItemInterface\n interface and will always contain these methods:\n\n\n\n\ngetIndex()\n - returns the index/key of the input.\n\n\ngetName()\n - returns a human friendly name for the input (company_name will be Company Name etc).\n\n\ngetValue()\n - returns the value of the input.\n\n\n\n\nInputFile\n has the same methods as above along with some other file-specific methods like:\n\n\n\n\ngetFilename\n - get the filename.\n\n\ngetTmpName()\n - get file temporary name.\n\n\ngetSize()\n - get file size.\n\n\nmove($destination)\n - move file to destination.\n\n\ngetContents()\n - get file content.\n\n\ngetType()\n - get mime-type for file.\n\n\ngetError()\n - get file upload error.\n\n\nhasError()\n - returns \nbool\n if an error occurred while uploading (if \ngetError\n is not 0).\n\n\ntoArray()\n - returns raw array",
            "title": "8. Input & params"
        },
        {
            "location": "/8.input.params/#input-parameters",
            "text": "Solital offers libraries and helpers that makes it easy to manage and manipulate input-parameters like  $_POST ,  $_GET  and  $_FILE .",
            "title": "Input &amp; parameters"
        },
        {
            "location": "/8.input.params/#using-the-input-class-to-manage-parameters",
            "text": "You can use the  InputHandler  class to easily access and manage parameters from your request. The  InputHandler  class offers extended features such as copying/moving uploaded files directly on the object, getting file-extension, mime-type etc.",
            "title": "Using the Input class to manage parameters"
        },
        {
            "location": "/8.input.params/#get-single-parameter-value",
            "text": "input($index, $defaultValue, ...$methods);  To quickly get a value from a parameter, you can use the  input  helper function.  This will automatically trim the value and ensure that it's not empty. If it's empty the  $defaultValue  will be returned instead.  Note:  \nThis function returns a  string  unless the parameters are grouped together, in that case it will return an  array  of values.  Example:  This example matches both POST and GET request-methods and if name is empty the default-value \"Guest\" will be returned.   $name = input('name', 'Guest', 'post', 'get');",
            "title": "Get single parameter value"
        },
        {
            "location": "/8.input.params/#get-parameter-object",
            "text": "When dealing with file-uploads it can be useful to retrieve the raw parameter object.  Search for object with default-value across multiple or specific request-methods:  The example below will return an  InputItem  object if the parameter was found or return the  $defaultValue . If parameters are grouped, it will return an array of  InputItem  objects.  $object = input()->find($index, $defaultValue = null, ...$methods);  Getting specific  $_GET  parameter as  InputItem  object:  The example below will return an  InputItem  object if the parameter was found or return the  $defaultValue . If parameters are grouped, it will return an array of  InputItem  objects.  $object = input()->get($index, $defaultValue = null);  Getting specific  $_POST  parameter as  InputItem  object:  The example below will return an  InputItem  object if the parameter was found or return the  $defaultValue . If parameters are grouped, it will return an array of  InputItem  objects.  $object = input()->post($index, $defaultValue = null);  Getting specific  $_FILE  parameter as  InputFile  object:  The example below will return an  InputFile  object if the parameter was found or return the  $defaultValue . If parameters are grouped, it will return an array of  InputFile  objects.  $object = input()->file($index, $defaultValue = null);",
            "title": "Get parameter object"
        },
        {
            "location": "/8.input.params/#managing-files",
            "text": "/**\n * Loop through a collection of files uploaded from a form on the page like this\n * <input type=\"file\" name=\"images[]\" />\n */\n\n/* @var $image \\Solital\\Core\\Http\\Input\\InputFile */\nforeach(input()->file('images', []) as $image)\n{\n    if($image->getMime() === 'image/jpeg') \n    {\n        $destinationFilname = sprintf('%s.%s', uniqid(), $image->getExtension());\n        $image->move(sprintf('/uploads/%s', $destinationFilename));\n    }\n}",
            "title": "Managing files"
        },
        {
            "location": "/8.input.params/#get-all-parameters",
            "text": "# Get all\n$values = input()->all();\n\n# Only match specific keys\n$values = input()->all([\n    'company_name',\n    'user_id'\n]);  All object implements the  InputItemInterface  interface and will always contain these methods:   getIndex()  - returns the index/key of the input.  getName()  - returns a human friendly name for the input (company_name will be Company Name etc).  getValue()  - returns the value of the input.   InputFile  has the same methods as above along with some other file-specific methods like:   getFilename  - get the filename.  getTmpName()  - get file temporary name.  getSize()  - get file size.  move($destination)  - move file to destination.  getContents()  - get file content.  getType()  - get mime-type for file.  getError()  - get file upload error.  hasError()  - returns  bool  if an error occurred while uploading (if  getError  is not 0).  toArray()  - returns raw array",
            "title": "Get all parameters"
        },
        {
            "location": "/9.events/",
            "text": "Events\n\n\nThis section will help you understand how to register your own callbacks to events in the router.\nIt will also cover the basics of event-handlers; how to use the handlers provided with the router and how to create your own custom event-handlers.\n\n\nAvailable events\n\n\nThis section contains all available events that can be registered using the \nEventHandler\n.\n\n\nAll event callbacks will retrieve a \nEventArgument\n object as parameter. This object contains easy access to event-name, router- and request instance and any special event-arguments related to the given event. You can see what special event arguments each event returns in the list below.  \n\n\n\n\n\n\n\n\nName\n\n\nSpecial arguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nEVENT_ALL\n\n\n-\n\n\nFires when a event is triggered.\n\n\n\n\n\n\nEVENT_INIT\n\n\n-\n\n\nFires when router is initializing and before routes are loaded.\n\n\n\n\n\n\nEVENT_LOAD\n\n\nloadedRoutes\n\n\nFires when all routes has been loaded and rendered, just before the output is returned.\n\n\n\n\n\n\nEVENT_ADD_ROUTE\n\n\nroute\n\n\nFires when route is added to the router.\n\n\n\n\n\n\nEVENT_REWRITE\n\n\nrewriteUrl\nrewriteRoute\n\n\nFires when a url-rewrite is and just before the routes are re-initialized.\n\n\n\n\n\n\nEVENT_BOOT\n\n\nbootmanagers\n\n\nFires when the router is booting. This happens just before boot-managers are rendered and before any routes has been loaded.\n\n\n\n\n\n\nEVENT_RENDER_BOOTMANAGER\n\n\nbootmanagers\nbootmanager\n\n\nFires before a boot-manager is rendered.\n\n\n\n\n\n\nEVENT_LOAD_ROUTES\n\n\nroutes\n\n\nFires when the router is about to load all routes.\n\n\n\n\n\n\nEVENT_FIND_ROUTE\n\n\nname\n\n\nFires whenever the \nfindRoute\n method is called within the \nRouter\n. This usually happens when the router tries to find routes that contains a certain url, usually after the \nEventHandler::EVENT_GET_URL\n event.\n\n\n\n\n\n\nEVENT_GET_URL\n\n\nname\nparameters\ngetParams\n\n\nFires whenever the \nRouter::getUrl\n method or \nurl\n-helper function is called and the router tries to find the route.\n\n\n\n\n\n\nEVENT_MATCH_ROUTE\n\n\nroute\n\n\nFires when a route is matched and valid (correct request-type etc). and before the route is rendered.\n\n\n\n\n\n\nEVENT_RENDER_ROUTE\n\n\nroute\n\n\nFires before a route is rendered.\n\n\n\n\n\n\nEVENT_LOAD_EXCEPTIONS\n\n\nexception\nexceptionHandlers\n\n\nFires when the router is loading exception-handlers.\n\n\n\n\n\n\nEVENT_RENDER_EXCEPTION\n\n\nexception\nexceptionHandler\nexceptionHandlers\n\n\nFires before the router is rendering a exception-handler.\n\n\n\n\n\n\nEVENT_RENDER_MIDDLEWARES\n\n\nroute\nmiddlewares\n\n\nFires before middlewares for a route is rendered.\n\n\n\n\n\n\nEVENT_RENDER_CSRF\n\n\ncsrfVerifier\n\n\nFires before the CSRF-verifier is rendered.\n\n\n\n\n\n\n\n\nRegistering new event\n\n\nTo register a new event you need to create a new instance of the \nEventHandler\n object. On this object you can add as many callbacks as you like by calling the \nregisterEvent\n method.\n\n\nWhen you've registered events, make sure to add it to the router by calling \n\nCourse::addEventHandler()\n. We recommend that you add your event-handlers within your \nroutes.php\n.\n\n\nExample:\n\n\nuse Solital\\Core\\Course\\Handlers\\EventHandler;\nuse Solital\\Core\\Course\\Event\\EventArgument;\n\n// --- your routes goes here ---\n\n$eventHandler = new EventHandler();\n\n// Add event that fires when a route is rendered\n$eventHandler->register(EventHandler::EVENT_RENDER_ROUTE, function(EventArgument $argument) {\n\n   // Get the route by using the special argument for this event.\n   $route = $argument->route;\n\n   // DO STUFF...\n\n});\n\nCourse::addEventHandler($eventHandler);\n\n\n\n\n\nCustom EventHandlers\n\n\nEventHandler\n is the class that manages events and must inherit from the \nEventHandlerInterface\n interface. The handler knows how to handle events for the given handler-type. \n\n\nMost of the time the basic \n\\Solital\\Core\\Course\\Handler\\EventHandler\n class will be more than enough for most people as you simply register an event which fires when triggered.\n\n\nLet's go over how to create your very own event-handler class.\n\n\nBelow is a basic example of a custom event-handler called \nDatabaseDebugHandler\n. The idea of the sample below is to logs all events to the database when triggered. Hopefully it will be enough to give you an idea on how the event-handlers work.\n\n\nnamespace Demo\\Handlers;\n\nuse Solital\\Core\\Course\\Event\\EventArgument;\nuse Solital\\Core\\Course\\Router;\n\nclass DatabaseDebugHandler implements EventHandlerInterface\n{\n\n    /**\n     * Debug callback\n     * @var \\Closure\n     */\n    protected $callback;\n\n    public function __construct()\n    {\n        $this->callback = function (EventArgument $argument) {\n            // todo: store log in database\n        };\n    }\n\n    /**\n     * Get events.\n     *\n     * @param string|null $name Filter events by name.\n     * @return array\n     */\n    public function getEvents(?string $name): array\n    {\n        return [\n            $name => [\n                $this->callback,\n            ],\n        ];\n    }\n\n    /**\n     * Fires any events registered with given event-name\n     *\n     * @param Router $router Router instance\n     * @param string $name Event name\n     * @param array ...$eventArgs Event arguments\n     */\n    public function fireEvents(Router $router, string $name, ...$eventArgs): void\n    {\n        $callback = $this->callback;\n        $callback(new EventArgument($router, $eventArgs));\n    }\n\n    /**\n     * Set debug callback\n     *\n     * @param \\Closure $event\n     */\n    public function setCallback(\\Closure $event): void\n    {\n        $this->callback = $event;\n    }\n\n}",
            "title": "9. Events"
        },
        {
            "location": "/9.events/#events",
            "text": "This section will help you understand how to register your own callbacks to events in the router.\nIt will also cover the basics of event-handlers; how to use the handlers provided with the router and how to create your own custom event-handlers.",
            "title": "Events"
        },
        {
            "location": "/9.events/#available-events",
            "text": "This section contains all available events that can be registered using the  EventHandler .  All event callbacks will retrieve a  EventArgument  object as parameter. This object contains easy access to event-name, router- and request instance and any special event-arguments related to the given event. You can see what special event arguments each event returns in the list below.       Name  Special arguments  Description      EVENT_ALL  -  Fires when a event is triggered.    EVENT_INIT  -  Fires when router is initializing and before routes are loaded.    EVENT_LOAD  loadedRoutes  Fires when all routes has been loaded and rendered, just before the output is returned.    EVENT_ADD_ROUTE  route  Fires when route is added to the router.    EVENT_REWRITE  rewriteUrl rewriteRoute  Fires when a url-rewrite is and just before the routes are re-initialized.    EVENT_BOOT  bootmanagers  Fires when the router is booting. This happens just before boot-managers are rendered and before any routes has been loaded.    EVENT_RENDER_BOOTMANAGER  bootmanagers bootmanager  Fires before a boot-manager is rendered.    EVENT_LOAD_ROUTES  routes  Fires when the router is about to load all routes.    EVENT_FIND_ROUTE  name  Fires whenever the  findRoute  method is called within the  Router . This usually happens when the router tries to find routes that contains a certain url, usually after the  EventHandler::EVENT_GET_URL  event.    EVENT_GET_URL  name parameters getParams  Fires whenever the  Router::getUrl  method or  url -helper function is called and the router tries to find the route.    EVENT_MATCH_ROUTE  route  Fires when a route is matched and valid (correct request-type etc). and before the route is rendered.    EVENT_RENDER_ROUTE  route  Fires before a route is rendered.    EVENT_LOAD_EXCEPTIONS  exception exceptionHandlers  Fires when the router is loading exception-handlers.    EVENT_RENDER_EXCEPTION  exception exceptionHandler exceptionHandlers  Fires before the router is rendering a exception-handler.    EVENT_RENDER_MIDDLEWARES  route middlewares  Fires before middlewares for a route is rendered.    EVENT_RENDER_CSRF  csrfVerifier  Fires before the CSRF-verifier is rendered.",
            "title": "Available events"
        },
        {
            "location": "/9.events/#registering-new-event",
            "text": "To register a new event you need to create a new instance of the  EventHandler  object. On this object you can add as many callbacks as you like by calling the  registerEvent  method.  When you've registered events, make sure to add it to the router by calling  Course::addEventHandler() . We recommend that you add your event-handlers within your  routes.php .  Example:  use Solital\\Core\\Course\\Handlers\\EventHandler;\nuse Solital\\Core\\Course\\Event\\EventArgument;\n\n// --- your routes goes here ---\n\n$eventHandler = new EventHandler();\n\n// Add event that fires when a route is rendered\n$eventHandler->register(EventHandler::EVENT_RENDER_ROUTE, function(EventArgument $argument) {\n\n   // Get the route by using the special argument for this event.\n   $route = $argument->route;\n\n   // DO STUFF...\n\n});\n\nCourse::addEventHandler($eventHandler);",
            "title": "Registering new event"
        },
        {
            "location": "/9.events/#custom-eventhandlers",
            "text": "EventHandler  is the class that manages events and must inherit from the  EventHandlerInterface  interface. The handler knows how to handle events for the given handler-type.   Most of the time the basic  \\Solital\\Core\\Course\\Handler\\EventHandler  class will be more than enough for most people as you simply register an event which fires when triggered.  Let's go over how to create your very own event-handler class.  Below is a basic example of a custom event-handler called  DatabaseDebugHandler . The idea of the sample below is to logs all events to the database when triggered. Hopefully it will be enough to give you an idea on how the event-handlers work.  namespace Demo\\Handlers;\n\nuse Solital\\Core\\Course\\Event\\EventArgument;\nuse Solital\\Core\\Course\\Router;\n\nclass DatabaseDebugHandler implements EventHandlerInterface\n{\n\n    /**\n     * Debug callback\n     * @var \\Closure\n     */\n    protected $callback;\n\n    public function __construct()\n    {\n        $this->callback = function (EventArgument $argument) {\n            // todo: store log in database\n        };\n    }\n\n    /**\n     * Get events.\n     *\n     * @param string|null $name Filter events by name.\n     * @return array\n     */\n    public function getEvents(?string $name): array\n    {\n        return [\n            $name => [\n                $this->callback,\n            ],\n        ];\n    }\n\n    /**\n     * Fires any events registered with given event-name\n     *\n     * @param Router $router Router instance\n     * @param string $name Event name\n     * @param array ...$eventArgs Event arguments\n     */\n    public function fireEvents(Router $router, string $name, ...$eventArgs): void\n    {\n        $callback = $this->callback;\n        $callback(new EventArgument($router, $eventArgs));\n    }\n\n    /**\n     * Set debug callback\n     *\n     * @param \\Closure $event\n     */\n    public function setCallback(\\Closure $event): void\n    {\n        $this->callback = $event;\n    }\n\n}",
            "title": "Custom EventHandlers"
        },
        {
            "location": "/10.auth/",
            "text": "Authenticate\n\n\nSolital uses the Guardian class to perform authentication. First of all, make sure to change the Guardian constants in config.php inside the config folder.\n\n\n/**\n* GUARDIAN CONSTANTS\n*/\n\n/* Login route if login verification is false */\ndefine('URL_LOGIN', 'your_login_url');\n/* Dashboard route if login verification is true */\ndefine('URL_DASHBOARD', 'your_dashboard_url');\n/* Standard Guardian index */\ndefine('INDEX_LOGIN', 'solital_index_login');\n\n\n\n\nSetting\n\n\nOn your Controller, extend the \nAuthController\n class.\n\n\n<?php\n\nnamespace Solital\\Components\\Controller;\nuse Solital\\Components\\Controller\\Auth\\AuthController;\n\nclass UserController extends AuthController {\n    #...\n}\n\n\n\n\nTo do this, define your database username and password fields, the values \u200b\u200bof your form input and the table where your username and password will be stored as shown below.\n\n\n$res = $this->columns('your_username_column', 'your_password_column')\n            ->values('input_username_name', 'input_password_name')\n            ->register('your_table');\n\n\n\n\nThe \n$res\n variable will return \ntrue\n if authentication is true. But if it is \nfalse\n, you can add a reply message after the above code if authentication fails.\n\n\nif ($res == false) {\n    Message::newMessage('wrongLogin', 'Incorrect username or password');\n    response()->redirect('your_login_url');\n}\n\n\n\n\nBelow is an example method of authentication.\n\n\n<?php\n\nnamespace Solital\\Components\\Controller;\nuse Solital\\Components\\Controller\\Auth\\AuthController;\n\nclass UserController extends AuthController \n{\n\n    public function verifyLogin() \n    {\n        $res = $this->columns('email_column', 'pass_column')\n                    ->values('input_email', 'input_password')\n                    ->register('tb_users');\n\n        if ($res == false) {\n            Message::newMessage('wrongLogin', 'Incorrect username or password');\n            response()->redirect('your_login_url');\n        }\n    }\n\n}\n\n\n\n\nCheck login\n\n\nTo ensure that the user is authenticated, use \ncheckLogin()\n method. If the login has not been validated using the \nvalidate()\n method, the user will be redirected to the route defined in the constant \nURL_LOGIN\n. The example below shows the method along with the Wolf template.\n\n\nGuardian::checkLogin();\n\nWolf::loadView('home');\n\n\n\n\nTo ensure that the user doesn't fall into the login route when it has already been validated, insert the \ncheckLogged()\n method in your login route. This method will redirect the user to your system's dashboard. Make sure your constant \nURL_DASHBOARD\n has a defined value.\n\n\nGuardian::checkLogged();\n\nWolf::loadView('login');\n\n\n\n\nLog off\n\n\nTo log off, use the \nlogoff()\n method.\n\n\nGuardian::logoff();",
            "title": "10. Authenticate"
        },
        {
            "location": "/10.auth/#authenticate",
            "text": "Solital uses the Guardian class to perform authentication. First of all, make sure to change the Guardian constants in config.php inside the config folder.  /**\n* GUARDIAN CONSTANTS\n*/\n\n/* Login route if login verification is false */\ndefine('URL_LOGIN', 'your_login_url');\n/* Dashboard route if login verification is true */\ndefine('URL_DASHBOARD', 'your_dashboard_url');\n/* Standard Guardian index */\ndefine('INDEX_LOGIN', 'solital_index_login');",
            "title": "Authenticate"
        },
        {
            "location": "/10.auth/#setting",
            "text": "On your Controller, extend the  AuthController  class.  <?php\n\nnamespace Solital\\Components\\Controller;\nuse Solital\\Components\\Controller\\Auth\\AuthController;\n\nclass UserController extends AuthController {\n    #...\n}  To do this, define your database username and password fields, the values \u200b\u200bof your form input and the table where your username and password will be stored as shown below.  $res = $this->columns('your_username_column', 'your_password_column')\n            ->values('input_username_name', 'input_password_name')\n            ->register('your_table');  The  $res  variable will return  true  if authentication is true. But if it is  false , you can add a reply message after the above code if authentication fails.  if ($res == false) {\n    Message::newMessage('wrongLogin', 'Incorrect username or password');\n    response()->redirect('your_login_url');\n}  Below is an example method of authentication.  <?php\n\nnamespace Solital\\Components\\Controller;\nuse Solital\\Components\\Controller\\Auth\\AuthController;\n\nclass UserController extends AuthController \n{\n\n    public function verifyLogin() \n    {\n        $res = $this->columns('email_column', 'pass_column')\n                    ->values('input_email', 'input_password')\n                    ->register('tb_users');\n\n        if ($res == false) {\n            Message::newMessage('wrongLogin', 'Incorrect username or password');\n            response()->redirect('your_login_url');\n        }\n    }\n\n}",
            "title": "Setting"
        },
        {
            "location": "/10.auth/#check-login",
            "text": "To ensure that the user is authenticated, use  checkLogin()  method. If the login has not been validated using the  validate()  method, the user will be redirected to the route defined in the constant  URL_LOGIN . The example below shows the method along with the Wolf template.  Guardian::checkLogin();\n\nWolf::loadView('home');  To ensure that the user doesn't fall into the login route when it has already been validated, insert the  checkLogged()  method in your login route. This method will redirect the user to your system's dashboard. Make sure your constant  URL_DASHBOARD  has a defined value.  Guardian::checkLogged();\n\nWolf::loadView('login');",
            "title": "Check login"
        },
        {
            "location": "/10.auth/#log-off",
            "text": "To log off, use the  logoff()  method.  Guardian::logoff();",
            "title": "Log off"
        },
        {
            "location": "/11.injection/",
            "text": "Dependecy Container\n\n\nSolital has implemented the PSR-11, that is, you can create containers easily and with good practices.\n\n\nThe syntax below shows a clear example.\n\n\nuse Solital\\Core\\Course\\Container\\Container;\n\n$container = new Container();\n\n$container->set('user', function($args) {\n    return new UserModel($args);\n}, new ContactModel());\n\n\n\n\nAnd to retrieve a value:\n\n\n$dep = $container->get('user');\n$dep->run();\n\n\n\n\nYou can also use containers within the classes.\n\n\n<?php\n\nnamespace Solital\\Components\\Controller;\nuse Solital\\Components\\Model\\UserModel;\nuse Solital\\Components\\Model\\ContactModel;\nuse Solital\\Core\\Course\\Container\\Container;\n\nclass UserController\n{\n    private $container;\n\n    public function __construct()\n    {\n        $this->container = new Container();\n\n        $this->container->set(\"user\", function($args) {\n            return new UserModel($args);\n        }, new ContactModel());\n    }\n\n    public function user()\n    {\n        $dep = $this->container->get('user');\n        $dep->run();\n    }\n\n    public function container()\n    {\n        $dep = $this->container->get('user');\n        $dep->run();\n    }\n}",
            "title": "11. Dependency Container"
        },
        {
            "location": "/11.injection/#dependecy-container",
            "text": "Solital has implemented the PSR-11, that is, you can create containers easily and with good practices.  The syntax below shows a clear example.  use Solital\\Core\\Course\\Container\\Container;\n\n$container = new Container();\n\n$container->set('user', function($args) {\n    return new UserModel($args);\n}, new ContactModel());  And to retrieve a value:  $dep = $container->get('user');\n$dep->run();  You can also use containers within the classes.  <?php\n\nnamespace Solital\\Components\\Controller;\nuse Solital\\Components\\Model\\UserModel;\nuse Solital\\Components\\Model\\ContactModel;\nuse Solital\\Core\\Course\\Container\\Container;\n\nclass UserController\n{\n    private $container;\n\n    public function __construct()\n    {\n        $this->container = new Container();\n\n        $this->container->set(\"user\", function($args) {\n            return new UserModel($args);\n        }, new ContactModel());\n    }\n\n    public function user()\n    {\n        $dep = $this->container->get('user');\n        $dep->run();\n    }\n\n    public function container()\n    {\n        $dep = $this->container->get('user');\n        $dep->run();\n    }\n}",
            "title": "Dependecy Container"
        },
        {
            "location": "/12.csrf/",
            "text": "CSRF Protection\n\n\nAny forms posting to \nPOST\n, \nPUT\n or \nDELETE\n routes should include the CSRF-token. We strongly recommend that you enable CSRF-verification on your site to maximize security.\n\n\nYou can use the \nBaseCsrfVerifier\n to enable CSRF-validation on all request. If you need to disable verification for specific urls, please refer to the \"Custom CSRF-verifier\" section below.\n\n\nBy default Solital will use the \nCookieTokenProvider\n class. This provider will store the security-token in a cookie on the clients machine.\nIf you want to store the token elsewhere, please refer to the \"Creating custom Token Provider\" section below.\n\n\nAdding CSRF-verifier\n\n\nWhen you've created your CSRF-verifier you need to tell Solital that it should use it. You can do this by adding the following line in your \nroutes.php\n file:\n\n\nCourse::csrfVerifier(new \\Demo\\Middlewares\\CsrfVerifier());\n\n\n\n\nGetting CSRF-token\n\n\nWhen posting to any of the urls that has CSRF-verification enabled, you need post your CSRF-token or else the request will get rejected.\n\n\nYou can get the CSRF-token by calling the helper method:\n\n\ncsrf_token();\n\n\n\n\nYou can also get the token directly:\n\n\nreturn Course::router()->getCsrfVerifier()->getTokenProvider()->getToken();\n\n\n\n\nThe default name/key for the input-field is \ncsrf_token\n and is defined in the \nPOST_KEY\n constant in the \nBaseCsrfVerifier\n class.\nYou can change the key by overwriting the constant in your own CSRF-verifier class.\n\n\nExample:\n\n\nThe example below will post to the current url with a hidden field \"\ncsrf_token\n\".\n\n\n<form method=\"post\" action=\"<?= url(); ?>\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= csrf_token(); ?>\">\n    <!-- other input elements here -->\n</form>\n\n\n\n\nCustom CSRF-verifier\n\n\nCreate a new class and extend the \nBaseCsrfVerifier\n middleware class provided by default with the simple-php-router library.\n\n\nAdd the property \nexcept\n with an array of the urls to the routes you want to exclude/whitelist from the CSRF validation.\nUsing \n*\n at the end for the url will match the entire url.\n\n\nHere's a basic example on a CSRF-verifier class:\n\n\nnamespace Demo\\Middlewares;\n\nuse Solital\\Core\\Http\\Middleware\\BaseCsrfVerifier;\n\nclass CsrfVerifier extends BaseCsrfVerifier\n{\n    /**\n     * CSRF validation will be ignored on the following urls.\n     */\n    protected $except = ['/api/*'];\n}\n\n\n\n\nCustom Token Provider\n\n\nBy default the \nBaseCsrfVerifier\n will use the \nCookieTokenProvider\n to store the token in a cookie on the clients machine.\n\n\nIf you need to store the token elsewhere, you can do that by creating your own class and implementing the \nTokenProviderInterface\n class.\n\n\nclass SessionTokenProvider implements TokenProviderInterface\n{\n\n    /**\n     * Refresh existing token\n     */\n    public function refresh(): void\n    {\n        // Implement your own functionality here...\n    }\n\n    /**\n     * Validate valid CSRF token\n     *\n     * @param string $token\n     * @return bool\n     */\n    public function validate($token): bool\n    {\n        // Implement your own functionality here...\n    }\n\n    /**\n     * Get token token\n     *\n     * @param string|null $defaultValue\n     * @return string|null\n     */\n    public function getToken(?string $defaultValue = null): ?string \n    {\n        // Implement your own functionality here...\n    }\n\n}\n\n\n\n\nNext you need to set your custom \nTokenProviderInterface\n implementation on your \nBaseCsrfVerifier\n class in your routes file:\n\n\n$verifier = new \\dscuz\\Middleware\\CsrfVerifier();\n$verifier->setTokenProvider(new SessionTokenProvider());\n\nCourse::csrfVerifier($verifier);",
            "title": "12. CSRF Protection"
        },
        {
            "location": "/12.csrf/#csrf-protection",
            "text": "Any forms posting to  POST ,  PUT  or  DELETE  routes should include the CSRF-token. We strongly recommend that you enable CSRF-verification on your site to maximize security.  You can use the  BaseCsrfVerifier  to enable CSRF-validation on all request. If you need to disable verification for specific urls, please refer to the \"Custom CSRF-verifier\" section below.  By default Solital will use the  CookieTokenProvider  class. This provider will store the security-token in a cookie on the clients machine.\nIf you want to store the token elsewhere, please refer to the \"Creating custom Token Provider\" section below.",
            "title": "CSRF Protection"
        },
        {
            "location": "/12.csrf/#adding-csrf-verifier",
            "text": "When you've created your CSRF-verifier you need to tell Solital that it should use it. You can do this by adding the following line in your  routes.php  file:  Course::csrfVerifier(new \\Demo\\Middlewares\\CsrfVerifier());",
            "title": "Adding CSRF-verifier"
        },
        {
            "location": "/12.csrf/#getting-csrf-token",
            "text": "When posting to any of the urls that has CSRF-verification enabled, you need post your CSRF-token or else the request will get rejected.  You can get the CSRF-token by calling the helper method:  csrf_token();  You can also get the token directly:  return Course::router()->getCsrfVerifier()->getTokenProvider()->getToken();  The default name/key for the input-field is  csrf_token  and is defined in the  POST_KEY  constant in the  BaseCsrfVerifier  class.\nYou can change the key by overwriting the constant in your own CSRF-verifier class.  Example:  The example below will post to the current url with a hidden field \" csrf_token \".  <form method=\"post\" action=\"<?= url(); ?>\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= csrf_token(); ?>\">\n    <!-- other input elements here -->\n</form>",
            "title": "Getting CSRF-token"
        },
        {
            "location": "/12.csrf/#custom-csrf-verifier",
            "text": "Create a new class and extend the  BaseCsrfVerifier  middleware class provided by default with the simple-php-router library.  Add the property  except  with an array of the urls to the routes you want to exclude/whitelist from the CSRF validation.\nUsing  *  at the end for the url will match the entire url.  Here's a basic example on a CSRF-verifier class:  namespace Demo\\Middlewares;\n\nuse Solital\\Core\\Http\\Middleware\\BaseCsrfVerifier;\n\nclass CsrfVerifier extends BaseCsrfVerifier\n{\n    /**\n     * CSRF validation will be ignored on the following urls.\n     */\n    protected $except = ['/api/*'];\n}",
            "title": "Custom CSRF-verifier"
        },
        {
            "location": "/12.csrf/#custom-token-provider",
            "text": "By default the  BaseCsrfVerifier  will use the  CookieTokenProvider  to store the token in a cookie on the clients machine.  If you need to store the token elsewhere, you can do that by creating your own class and implementing the  TokenProviderInterface  class.  class SessionTokenProvider implements TokenProviderInterface\n{\n\n    /**\n     * Refresh existing token\n     */\n    public function refresh(): void\n    {\n        // Implement your own functionality here...\n    }\n\n    /**\n     * Validate valid CSRF token\n     *\n     * @param string $token\n     * @return bool\n     */\n    public function validate($token): bool\n    {\n        // Implement your own functionality here...\n    }\n\n    /**\n     * Get token token\n     *\n     * @param string|null $defaultValue\n     * @return string|null\n     */\n    public function getToken(?string $defaultValue = null): ?string \n    {\n        // Implement your own functionality here...\n    }\n\n}  Next you need to set your custom  TokenProviderInterface  implementation on your  BaseCsrfVerifier  class in your routes file:  $verifier = new \\dscuz\\Middleware\\CsrfVerifier();\n$verifier->setTokenProvider(new SessionTokenProvider());\n\nCourse::csrfVerifier($verifier);",
            "title": "Custom Token Provider"
        },
        {
            "location": "/13.cache/",
            "text": "Cache\n\n\nCache is a layer of high-speed physical data storage that holds a subset of data, usually temporary in nature, so that future requests for that data are answered more quickly than is possible when accessing the primary storage location of data. Caching allows you to efficiently reuse previously recovered or computed data.\n\n\nHow to use\n\n\nKatrina ORM\n\n\nYou can cache the return of the select. To do this, perform the instance of the Cache class as follows:\n\n\nuse Solital\\Cache\\Cache;\n\n$cache = new Cache();\n\n$list = $this->instance()->select()->build(\"all\");\n\n// O m\u00e9todo 'has' verif\u00edca se existe o \u00edndice\nif ($cache->has('list') == true) {\n    echo '<h1>from cache</h1>';\n    // O m\u00e9todo 'get' retorna o valor em cache caso exista\n    $cache->get('list');\n} else {\n    echo '<h1>created cache</h1>';\n    // O m\u00e9todo 'set' cria o arquivo em cache\n    $cache->set('list', $list, 20);\n}\n\n// Exibe o conte\u00fado original da vari\u00e1vel $list\necho '<h1>from original</h1>';\nvar_dump($list);\n\n\n\n\nWolf Template\n\n\nTo cache a template in Wolf, use the static cache function to set the cache file time as shown below:\n\n\nWolf::cache(date('Hi'));\n\nWolf::loadView('home');",
            "title": "13. Cache"
        },
        {
            "location": "/13.cache/#cache",
            "text": "Cache is a layer of high-speed physical data storage that holds a subset of data, usually temporary in nature, so that future requests for that data are answered more quickly than is possible when accessing the primary storage location of data. Caching allows you to efficiently reuse previously recovered or computed data.",
            "title": "Cache"
        },
        {
            "location": "/13.cache/#how-to-use",
            "text": "",
            "title": "How to use"
        },
        {
            "location": "/13.cache/#katrina-orm",
            "text": "You can cache the return of the select. To do this, perform the instance of the Cache class as follows:  use Solital\\Cache\\Cache;\n\n$cache = new Cache();\n\n$list = $this->instance()->select()->build(\"all\");\n\n// O m\u00e9todo 'has' verif\u00edca se existe o \u00edndice\nif ($cache->has('list') == true) {\n    echo '<h1>from cache</h1>';\n    // O m\u00e9todo 'get' retorna o valor em cache caso exista\n    $cache->get('list');\n} else {\n    echo '<h1>created cache</h1>';\n    // O m\u00e9todo 'set' cria o arquivo em cache\n    $cache->set('list', $list, 20);\n}\n\n// Exibe o conte\u00fado original da vari\u00e1vel $list\necho '<h1>from original</h1>';\nvar_dump($list);",
            "title": "Katrina ORM"
        },
        {
            "location": "/13.cache/#wolf-template",
            "text": "To cache a template in Wolf, use the static cache function to set the cache file time as shown below:  Wolf::cache(date('Hi'));\n\nWolf::loadView('home');",
            "title": "Wolf Template"
        },
        {
            "location": "/14.katrina/",
            "text": "Getting Started\n\n\nWhat is Katrina ORM?\n\n\nKatrina ORM is a component to bring the object-oriented application development paradigm closer to the relational database paradigm. It helps when carrying out common routines, such as the famous CRUD (create, read, edit and delete), in addition to having a login and data paging system.\n\n\nRequirements\n\n\nMake sure that the PDO is enabled in your development environment or in your hosting.\n\n\nInstallation\n\n\nKatrina ORM is already installed by default in Solital. But if you are going to install in another project, use the command below to download via Composer.\n\n\ncomposer require solital/katrina\n\n\n\n\nOr add the code below to your \ncomposer.json\n file.\n\n\n\"require\": {\n    \"solital/katrina\": \"0.1.*\"\n}\n\n\n\n\nSettings\n\n\nTo configure your database, create or edit (in Solital) the \ndb.php\n file inside the \nconfig\n folder.\n\n\ndefine('DB_CONFIG', [\n    'DRIVE' => 'your_drive',\n    'HOST' => 'your_host',\n    'DBNAME' => 'your_database_name',\n    'USER' => 'your_user',\n    'PASS' => 'your_password'\n]);\n\n\n\n\nInitial structure\n\n\nYou can use katrina in two ways:\n\n\n1\u00b0) In solital, extend the model already created and define the variables \n$table\n, \n$primaryKey\n and \n$columns\n in your model's constructor as listed below:\n\n\n<?php\n\nnamespace Solital\\Components\\Model;\nuse Solital\\Components\\Model\\Model;\n\nclass User extends Model\n{\n    public function __construct()\n    {\n        $this->table = 'your_database_table';\n        $this->primaryKey = 'primary_key_of_the_table';\n        $this->columns = [\n            'first_column_of_the_table', \n            'second column of the table',\n            #...\n        ];\n    }\n\n    public function get()\n    {\n        return $this->instance()->select()->build(\"ALL\");\n    }\n}\n\n\n\n\n2\u00b0) Or if you are using it in another project\n\n\n<?php\n\nuse Katrina\\Katrina as Katrina;\n\nclass User\n{\n\n    # String\n    private $table = 'your_database_table';\n    # String\n    private $primaryKey = 'primary_key_of_the_table';\n    # Array\n    private $columns = [\n        'first_column_of_the_table', \n        'second column of the table',\n        #...\n    ];\n\n    public function instance()\n    {\n        $katrina = new Katrina($this->table, $this->columnPrimaryKey, $this->columns);\n        return $katrina;\n    }\n\n    public function get()\n    {\n        return $this->instance()->select()->build(\"ALL\");\n    }\n}\n\n\n\n\nData manipulation\n\n\nList\n\n\nTo list all fields in the table, use \nselect()\n as shown in the previous example. By default, the method will list all fields in the table.\n\n\npublic function get()\n{\n    return $this->instance()->select()->build(\"ALL\");\n}\n\n\n\n\nTo list a single value, pass the table field \nid\n as a parameter, and in \nbuild()\n method use ONLY.\n\n\npublic function get()\n{\n    return $this->instance()->select(3)->build(\"ONLY\");\n}\n\n\n\n\nTo specify which fields you want to list, pass the values \u200b\u200bas parameters.\n\n\npublic function get()\n{\n    return $this->instance()->select(\"name, city, country\")->build();\n}\n\n\n\n\nIf you need the \nWHERE\n clause, use the second parameter.\n\n\nListing foreign key\n\n\nInner join\n\n\nThe \ninnerJoin()\n method returns the values of two tables that have a foreign key. Enter the name of the table and the field of the other table that has the primary key for your main table.\n\n\npublic function get()\n{\n    $res = $this->instance()->innerJoin(\"address\", \"idAddress\")->build(\"ALL\");\n    return $res;\n}\n\n\n\n\nIf you want to return only a single value, use the third parameter passing the primary key.\n\n\npublic function get()\n{\n    $res = $this->instance()->innerJoin(\"address\", \"idAddress\", 2)->build(\"ALL\");\n    return $res;\n}\n\n\n\n\nYou can inform which fields you want to return. \"a\" is your main table while \"b\" is your table that has the foreign key.\n\n\npublic function get()\n{\n    $res = $this->instance()\n    ->innerJoin(\"address\", \"idAddress\", 2 \"a.idPerson, a.name, b.street\", \"address\", \"idAddress\")->build(\"ALL\");\n    return $res;\n}\n\n\n\n\nInsert\n\n\nThe \ninsert()\n method inserts the values \u200b\u200binto the table. It is NOT necessary to use \nbuild()\n method to insert the data. To do this, create an array with the values \u200b\u200bthat the method will receive\n\n\npublic function insert()\n{\n    $res = $this->instance()->insert(['Clark', 'Metropolis', 'EUA']);\n    return $res;\n}\n\n\n\n\nUpdate\n\n\nThe \nupdate()\n method updates the values \u200b\u200bin the table. It is NOT necessary to use \nbuild()\n method to update the data. The process is similar to the insert method. The first parameter is the columns that will be updated, the second parameter the values \u200b\u200band the third the row \nid\n.\n\n\npublic function update()\n{\n    $res = $this->instance()->update(['name', 'age'], ['Specter', '41'], 8);\n    return $res;\n}\n\n\n\n\nDelete\n\n\nThe \ndelete()\n method deletes the values \u200b\u200bin the table. Enter the primary key corresponding to the table row you want to delete.\n\n\npublic function delete()\n{\n    $res = $this->instance()->delete(3)->build();\n    return $res;\n}\n\n\n\n\nManipulating tables\n\n\nCreate a new table\n\n\nThe \ncreateTable()\n method starts opening the table. After inserting the fields and data types that the tables will have, use \ncloseTable()\n to close the table. For a better understanding see the syntax below.\n\n\n$res = $this->instance()\n            /* Starts the table by specifying its name */\n            ->createTable(\"your_table_name\")\n            /* Fields and table type */\n            ->int(\"id_orm\")->primary()->increment()\n            ->varchar(\"name\", 20)->unique()->notNull()->default(\"specter\")\n            ->int(\"age\", 3)->unsigned()->notNull()\n            ->varchar(\"email\", 30)->default(\"harvey.specter@gmail.com\")->notNull()\n            ->varchar(\"profession\", 40)\n            ->int(\"tipo\")\n            ->constraint(\"dev_cons_fk\")->foreign(\"type\")->references(\"dev\", \"iddev\")\n            /* Close the command to create the table */\n            ->closeTable()\n            /* Compile the code above */\n            ->build();\n\n\n\n\nList tables\n\n\nTo have a list of all the tables in your database, use the \nlistTables()\n method by passing \nALL\n in the \nbuild()\n method.\n\n\npublic function get()\n{\n    $res = $this->instance()->listTables()->build(\"ALL\");\n    return $res;\n}\n\n\n\n\nList columns\n\n\nTo list the columns of a table, use the \ndescribeTable()\n method passing as a parameter the name of your table together with \nALL\n in the \nbuild()\n\n\npublic function get()\n{\n    $res = $this->instance()->describeTable(\"your_table\")->build(\"ALL\");\n    return $res;\n}\n\n\n\n\nAlter table\n\n\nThe \nalter()\n method performs the procedures of adding, changing and deleting a field from the database table.\n\n\nAdd new field\n\n\nUse \nadd()\n method together with the data type to add a new field.\n\n\npublic function get()\n{\n    $res = $this->instance()\n                ->alter(\"message\")->add()\n                ->varchar(\"first_field\", 10)\n                ->build();\n}\n\n\n\n\nDrop column\n\n\nUse the \ndrop()\n method to delete a column from the table.\n\n\npublic function get()\n{\n    $res = $this->instance()\n                ->alter(\"message\")->drop(\"type\")\n                ->build();\n}\n\n\n\n\nModify column\n\n\nUse the modify SQL with the \nmodify()\n method.\n\n\npublic function get()\n{\n    $res = $this->instance()\n                ->alter(\"message\")->modify()\n                ->varchar(\"person_type\", 100)\n                ->build();\n}\n\n\n\n\nChange column\n\n\nUse the \nchange()\n method to change a column. As a parameter, pass the current column name.\n\n\npublic function get()\n{\n    $res = $this->instance()\n                ->alter(\"message\")->change(\"person_type\")\n                ->varchar(\"type\", 100)\n                ->build();\n}\n\n\n\n\nRename table\n\n\nUse the \nrename()\n method to rename a database table. Use the first parameter the current table name and the second parameter the new table name.\n\n\npublic function get()\n{\n    $res = $this->instance()\n                ->rename(\"message\", \"new_message\")\n                ->build();\n}\n\n\n\n\nAdding foreign key\n\n\nTo add a foreign key to an already created table, use the \naddConstraint()\n method to add a constraint; \nforeign()\n to inform the column and \nreferences()\n to refer to the table.\n\n\npublic function get()\n{\n    $res = $this->instance()\n                ->alter(\"message\")->addConstraint(\"dev_cons_fk\")->foreign(\"type\")->references(\"dev\", \"iddev\")\n                ->build();\n}\n\n\n\n\nNOTE: if you are creating a new table, use the \nconstraint()\n method instead of \naddConstraint()\n as shown below:\n\n\n#...\n->constraint(\"dev_cons_fk\")->foreign(\"type\")->references(\"dev\", \"iddev\")\n#...\n\n\n\n\nDrop table\n\n\nTo delete a table from the database, use the \ndropTable()\n method.\n\n\npublic function get()\n{\n    $res = $this->instance()\n                ->dropTable(\"message\")\n                ->build();\n}\n\n\n\n\nTruncate table\n\n\nTo use the sql truncate command, use the \ntruncate()\n method.\n\n\npublic function get()\n{\n    $res = $this->instance()\n                ->truncate()\n                ->build();\n}\n\n\n\n\nBy default, the database checks the table's foreign key and locks the truncate command. To disable foreign key verification, enter \ntrue\n as a parameter.\n\n\npublic function get()\n{\n    $res = $this->instance()\n                ->truncate(true)\n                ->build();\n}\n\n\n\n\nProcedure\n\n\nTo call a database procedure, use the \ncall()\n method.\n\n\npublic function get()\n{\n    $res = $this->instance()->call('procedure_name');\n    return $res;\n}\n\n\n\n\nTo use procedure parameters, pass the values in array format.\n\n\npublic function get()\n{\n    $res = $this->instance()->call('procedure_name' , ['param_1, param_2, param_3']);\n    return $res;\n}\n\n\n\n\nPagination\n\n\nThe \npagination()\n method creates a system for paging results. To initialize, the first parameter must be the table you want to use to start paging. The second parameter will list the amount of values that will be returned from the table as shown in the example below.\n\n\npublic function get()\n{\n    $res = $this->instance()->pagination('your_table', 3);\n    return $res;\n}\n\n\n\n\nThe above method will return an array containing \nrows\n indexes that will return values, and \narrows\n that will return commands for pagination. To use in the Wolf template, use it this way.\n\n\n$html = $this->instance()->pagination('your_table', 3);\n\nWolf::loadView('home', [\n    'rows' => $html['rows'],\n    'arrows' => $html['arrows']\n]);\n\n\n\n\nAnd in your view, return the results that way.\n\n\n<table>\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Age</th>\n            <th>Gender</th>\n        </tr>\n    </thead>\n\n    <tbody>\n        <?php foreach ($rows as $r): ?>\n            <tr>\n                <td><?= $r['name'] ?></td>\n                <td><?= $r['age'] ?></td>\n                <td><?= $r['gender'] ?></td>\n            </tr>\n        <?php endforeach; ?>\n    </tbody>\n</table>\n\n<?php\necho $arrows;\n\n\n\n\nThe result will be as follows:\n\n\n\n\n\n\n\n\nName\n\n\nAge\n\n\nGender\n\n\n\n\n\n\n\n\n\n\nSam\n\n\n47\n\n\nMale\n\n\n\n\n\n\nDean\n\n\n49\n\n\nMale\n\n\n\n\n\n\nMarry\n\n\n52\n\n\nFemale\n\n\n\n\n\n\n\n\n<< 1 2 3 >>\n\n\n\n\nTo change the arrows (\n<<\n and \n>>\n), use the last two parameters of the \npagination()\n method.\n\n\npublic function get()\n{\n    $res = $this->dbInstance()->pagination('tb_users', 3, 'First Item', 'Last Item');\n    return $res;\n}\n\n\n\n\nThe result will be:\n\n\nFirst item 1 2 3 Last item\n\n\n\n\nTypes of data\n\n\nBelow is listed the attributes and data supported by Katrina ORM:\n\n\nString data\n\n\n\n\n\n\n\n\nTypes\n\n\n\n\n\n\n\n\n\n\nvarchar(\"column_name\", size)\n\n\n\n\n\n\nchar(\"column_name\", size)\n\n\n\n\n\n\ntinytext(\"column_name\", size)\n\n\n\n\n\n\nmediumtext(\"column_name\", size)\n\n\n\n\n\n\nlongtext(\"column_name\", size)\n\n\n\n\n\n\ntext(\"column_name\", size)\n\n\n\n\n\n\n\n\nNumerical data\n\n\n\n\n\n\n\n\nTypes\n\n\n\n\n\n\n\n\n\n\ntinyint(\"column_name\", size)\n\n\n\n\n\n\nsmallint(\"column_name\", size)\n\n\n\n\n\n\nmediumint(\"column_name\", size)\n\n\n\n\n\n\nbigint(\"column_name\", size)\n\n\n\n\n\n\nint(\"column_name\", size)\n\n\n\n\n\n\ndecimal(\"column_name\", value1, value2)\n\n\n\n\n\n\n\n\nDate and time\n\n\n\n\n\n\n\n\nTypes\n\n\n\n\n\n\n\n\n\n\ndate(\"column_name\")\n\n\n\n\n\n\nyear(\"column_name\")\n\n\n\n\n\n\ntime(\"column_name\")\n\n\n\n\n\n\ndatetime(\"column_name\")\n\n\n\n\n\n\ntimestamp(\"column_name\")\n\n\n\n\n\n\n\n\nBoolean\n\n\n\n\n\n\n\n\nTypes\n\n\n\n\n\n\n\n\n\n\nboolean(\"column_name\")\n\n\n\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\n\nTypes\n\n\n\n\n\n\n\n\n\n\ndefault(\"default_value\")\n\n\n\n\n\n\nunique()\n\n\n\n\n\n\nunsigned()\n\n\n\n\n\n\nincremet()\n\n\n\n\n\n\nnotNull()\n\n\n\n\n\n\nprimary()",
            "title": "14. Katrina ORM"
        },
        {
            "location": "/14.katrina/#getting-started",
            "text": "",
            "title": "Getting Started"
        },
        {
            "location": "/14.katrina/#what-is-katrina-orm",
            "text": "Katrina ORM is a component to bring the object-oriented application development paradigm closer to the relational database paradigm. It helps when carrying out common routines, such as the famous CRUD (create, read, edit and delete), in addition to having a login and data paging system.",
            "title": "What is Katrina ORM?"
        },
        {
            "location": "/14.katrina/#requirements",
            "text": "Make sure that the PDO is enabled in your development environment or in your hosting.",
            "title": "Requirements"
        },
        {
            "location": "/14.katrina/#installation",
            "text": "Katrina ORM is already installed by default in Solital. But if you are going to install in another project, use the command below to download via Composer.  composer require solital/katrina  Or add the code below to your  composer.json  file.  \"require\": {\n    \"solital/katrina\": \"0.1.*\"\n}",
            "title": "Installation"
        },
        {
            "location": "/14.katrina/#settings",
            "text": "To configure your database, create or edit (in Solital) the  db.php  file inside the  config  folder.  define('DB_CONFIG', [\n    'DRIVE' => 'your_drive',\n    'HOST' => 'your_host',\n    'DBNAME' => 'your_database_name',\n    'USER' => 'your_user',\n    'PASS' => 'your_password'\n]);",
            "title": "Settings"
        },
        {
            "location": "/14.katrina/#initial-structure",
            "text": "You can use katrina in two ways:  1\u00b0) In solital, extend the model already created and define the variables  $table ,  $primaryKey  and  $columns  in your model's constructor as listed below:  <?php\n\nnamespace Solital\\Components\\Model;\nuse Solital\\Components\\Model\\Model;\n\nclass User extends Model\n{\n    public function __construct()\n    {\n        $this->table = 'your_database_table';\n        $this->primaryKey = 'primary_key_of_the_table';\n        $this->columns = [\n            'first_column_of_the_table', \n            'second column of the table',\n            #...\n        ];\n    }\n\n    public function get()\n    {\n        return $this->instance()->select()->build(\"ALL\");\n    }\n}  2\u00b0) Or if you are using it in another project  <?php\n\nuse Katrina\\Katrina as Katrina;\n\nclass User\n{\n\n    # String\n    private $table = 'your_database_table';\n    # String\n    private $primaryKey = 'primary_key_of_the_table';\n    # Array\n    private $columns = [\n        'first_column_of_the_table', \n        'second column of the table',\n        #...\n    ];\n\n    public function instance()\n    {\n        $katrina = new Katrina($this->table, $this->columnPrimaryKey, $this->columns);\n        return $katrina;\n    }\n\n    public function get()\n    {\n        return $this->instance()->select()->build(\"ALL\");\n    }\n}",
            "title": "Initial structure"
        },
        {
            "location": "/14.katrina/#data-manipulation",
            "text": "",
            "title": "Data manipulation"
        },
        {
            "location": "/14.katrina/#list",
            "text": "To list all fields in the table, use  select()  as shown in the previous example. By default, the method will list all fields in the table.  public function get()\n{\n    return $this->instance()->select()->build(\"ALL\");\n}  To list a single value, pass the table field  id  as a parameter, and in  build()  method use ONLY.  public function get()\n{\n    return $this->instance()->select(3)->build(\"ONLY\");\n}  To specify which fields you want to list, pass the values \u200b\u200bas parameters.  public function get()\n{\n    return $this->instance()->select(\"name, city, country\")->build();\n}  If you need the  WHERE  clause, use the second parameter.",
            "title": "List"
        },
        {
            "location": "/14.katrina/#listing-foreign-key",
            "text": "Inner join  The  innerJoin()  method returns the values of two tables that have a foreign key. Enter the name of the table and the field of the other table that has the primary key for your main table.  public function get()\n{\n    $res = $this->instance()->innerJoin(\"address\", \"idAddress\")->build(\"ALL\");\n    return $res;\n}  If you want to return only a single value, use the third parameter passing the primary key.  public function get()\n{\n    $res = $this->instance()->innerJoin(\"address\", \"idAddress\", 2)->build(\"ALL\");\n    return $res;\n}  You can inform which fields you want to return. \"a\" is your main table while \"b\" is your table that has the foreign key.  public function get()\n{\n    $res = $this->instance()\n    ->innerJoin(\"address\", \"idAddress\", 2 \"a.idPerson, a.name, b.street\", \"address\", \"idAddress\")->build(\"ALL\");\n    return $res;\n}",
            "title": "Listing foreign key"
        },
        {
            "location": "/14.katrina/#insert",
            "text": "The  insert()  method inserts the values \u200b\u200binto the table. It is NOT necessary to use  build()  method to insert the data. To do this, create an array with the values \u200b\u200bthat the method will receive  public function insert()\n{\n    $res = $this->instance()->insert(['Clark', 'Metropolis', 'EUA']);\n    return $res;\n}",
            "title": "Insert"
        },
        {
            "location": "/14.katrina/#update",
            "text": "The  update()  method updates the values \u200b\u200bin the table. It is NOT necessary to use  build()  method to update the data. The process is similar to the insert method. The first parameter is the columns that will be updated, the second parameter the values \u200b\u200band the third the row  id .  public function update()\n{\n    $res = $this->instance()->update(['name', 'age'], ['Specter', '41'], 8);\n    return $res;\n}",
            "title": "Update"
        },
        {
            "location": "/14.katrina/#delete",
            "text": "The  delete()  method deletes the values \u200b\u200bin the table. Enter the primary key corresponding to the table row you want to delete.  public function delete()\n{\n    $res = $this->instance()->delete(3)->build();\n    return $res;\n}",
            "title": "Delete"
        },
        {
            "location": "/14.katrina/#manipulating-tables",
            "text": "",
            "title": "Manipulating tables"
        },
        {
            "location": "/14.katrina/#create-a-new-table",
            "text": "The  createTable()  method starts opening the table. After inserting the fields and data types that the tables will have, use  closeTable()  to close the table. For a better understanding see the syntax below.  $res = $this->instance()\n            /* Starts the table by specifying its name */\n            ->createTable(\"your_table_name\")\n            /* Fields and table type */\n            ->int(\"id_orm\")->primary()->increment()\n            ->varchar(\"name\", 20)->unique()->notNull()->default(\"specter\")\n            ->int(\"age\", 3)->unsigned()->notNull()\n            ->varchar(\"email\", 30)->default(\"harvey.specter@gmail.com\")->notNull()\n            ->varchar(\"profession\", 40)\n            ->int(\"tipo\")\n            ->constraint(\"dev_cons_fk\")->foreign(\"type\")->references(\"dev\", \"iddev\")\n            /* Close the command to create the table */\n            ->closeTable()\n            /* Compile the code above */\n            ->build();",
            "title": "Create a new table"
        },
        {
            "location": "/14.katrina/#list-tables",
            "text": "To have a list of all the tables in your database, use the  listTables()  method by passing  ALL  in the  build()  method.  public function get()\n{\n    $res = $this->instance()->listTables()->build(\"ALL\");\n    return $res;\n}",
            "title": "List tables"
        },
        {
            "location": "/14.katrina/#list-columns",
            "text": "To list the columns of a table, use the  describeTable()  method passing as a parameter the name of your table together with  ALL  in the  build()  public function get()\n{\n    $res = $this->instance()->describeTable(\"your_table\")->build(\"ALL\");\n    return $res;\n}",
            "title": "List columns"
        },
        {
            "location": "/14.katrina/#alter-table",
            "text": "The  alter()  method performs the procedures of adding, changing and deleting a field from the database table.  Add new field  Use  add()  method together with the data type to add a new field.  public function get()\n{\n    $res = $this->instance()\n                ->alter(\"message\")->add()\n                ->varchar(\"first_field\", 10)\n                ->build();\n}  Drop column  Use the  drop()  method to delete a column from the table.  public function get()\n{\n    $res = $this->instance()\n                ->alter(\"message\")->drop(\"type\")\n                ->build();\n}  Modify column  Use the modify SQL with the  modify()  method.  public function get()\n{\n    $res = $this->instance()\n                ->alter(\"message\")->modify()\n                ->varchar(\"person_type\", 100)\n                ->build();\n}  Change column  Use the  change()  method to change a column. As a parameter, pass the current column name.  public function get()\n{\n    $res = $this->instance()\n                ->alter(\"message\")->change(\"person_type\")\n                ->varchar(\"type\", 100)\n                ->build();\n}",
            "title": "Alter table"
        },
        {
            "location": "/14.katrina/#rename-table",
            "text": "Use the  rename()  method to rename a database table. Use the first parameter the current table name and the second parameter the new table name.  public function get()\n{\n    $res = $this->instance()\n                ->rename(\"message\", \"new_message\")\n                ->build();\n}",
            "title": "Rename table"
        },
        {
            "location": "/14.katrina/#adding-foreign-key",
            "text": "To add a foreign key to an already created table, use the  addConstraint()  method to add a constraint;  foreign()  to inform the column and  references()  to refer to the table.  public function get()\n{\n    $res = $this->instance()\n                ->alter(\"message\")->addConstraint(\"dev_cons_fk\")->foreign(\"type\")->references(\"dev\", \"iddev\")\n                ->build();\n}  NOTE: if you are creating a new table, use the  constraint()  method instead of  addConstraint()  as shown below:  #...\n->constraint(\"dev_cons_fk\")->foreign(\"type\")->references(\"dev\", \"iddev\")\n#...",
            "title": "Adding foreign key"
        },
        {
            "location": "/14.katrina/#drop-table",
            "text": "To delete a table from the database, use the  dropTable()  method.  public function get()\n{\n    $res = $this->instance()\n                ->dropTable(\"message\")\n                ->build();\n}",
            "title": "Drop table"
        },
        {
            "location": "/14.katrina/#truncate-table",
            "text": "To use the sql truncate command, use the  truncate()  method.  public function get()\n{\n    $res = $this->instance()\n                ->truncate()\n                ->build();\n}  By default, the database checks the table's foreign key and locks the truncate command. To disable foreign key verification, enter  true  as a parameter.  public function get()\n{\n    $res = $this->instance()\n                ->truncate(true)\n                ->build();\n}",
            "title": "Truncate table"
        },
        {
            "location": "/14.katrina/#procedure",
            "text": "To call a database procedure, use the  call()  method.  public function get()\n{\n    $res = $this->instance()->call('procedure_name');\n    return $res;\n}  To use procedure parameters, pass the values in array format.  public function get()\n{\n    $res = $this->instance()->call('procedure_name' , ['param_1, param_2, param_3']);\n    return $res;\n}",
            "title": "Procedure"
        },
        {
            "location": "/14.katrina/#pagination",
            "text": "The  pagination()  method creates a system for paging results. To initialize, the first parameter must be the table you want to use to start paging. The second parameter will list the amount of values that will be returned from the table as shown in the example below.  public function get()\n{\n    $res = $this->instance()->pagination('your_table', 3);\n    return $res;\n}  The above method will return an array containing  rows  indexes that will return values, and  arrows  that will return commands for pagination. To use in the Wolf template, use it this way.  $html = $this->instance()->pagination('your_table', 3);\n\nWolf::loadView('home', [\n    'rows' => $html['rows'],\n    'arrows' => $html['arrows']\n]);  And in your view, return the results that way.  <table>\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Age</th>\n            <th>Gender</th>\n        </tr>\n    </thead>\n\n    <tbody>\n        <?php foreach ($rows as $r): ?>\n            <tr>\n                <td><?= $r['name'] ?></td>\n                <td><?= $r['age'] ?></td>\n                <td><?= $r['gender'] ?></td>\n            </tr>\n        <?php endforeach; ?>\n    </tbody>\n</table>\n\n<?php\necho $arrows;  The result will be as follows:     Name  Age  Gender      Sam  47  Male    Dean  49  Male    Marry  52  Female     << 1 2 3 >>  To change the arrows ( <<  and  >> ), use the last two parameters of the  pagination()  method.  public function get()\n{\n    $res = $this->dbInstance()->pagination('tb_users', 3, 'First Item', 'Last Item');\n    return $res;\n}  The result will be:  First item 1 2 3 Last item",
            "title": "Pagination"
        },
        {
            "location": "/14.katrina/#types-of-data",
            "text": "Below is listed the attributes and data supported by Katrina ORM:  String data     Types      varchar(\"column_name\", size)    char(\"column_name\", size)    tinytext(\"column_name\", size)    mediumtext(\"column_name\", size)    longtext(\"column_name\", size)    text(\"column_name\", size)     Numerical data     Types      tinyint(\"column_name\", size)    smallint(\"column_name\", size)    mediumint(\"column_name\", size)    bigint(\"column_name\", size)    int(\"column_name\", size)    decimal(\"column_name\", value1, value2)     Date and time     Types      date(\"column_name\")    year(\"column_name\")    time(\"column_name\")    datetime(\"column_name\")    timestamp(\"column_name\")     Boolean     Types      boolean(\"column_name\")     Attributes     Types      default(\"default_value\")    unique()    unsigned()    incremet()    notNull()    primary()",
            "title": "Types of data"
        }
    ]
}